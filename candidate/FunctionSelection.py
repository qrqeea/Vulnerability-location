import os
import sys
import tqdm
from util.io_util import load_pickle, save_text, save_json, save_pickle, load_json, load_file
from util.general_util import rule_based_filtering
# from util.similarity_util import *


class FunctionSelection:

    def __init__(self, module_root_path: str, specified_repo_path: str, cve_data_all: dict, cve_list_done: list):
        self.module_root_path = module_root_path
        self.specified_repo_path = specified_repo_path
        self.cve_data_all = cve_data_all

        os.makedirs(self.module_root_path, exist_ok = True)
        
        self.filtered_files_path = f'{self.module_root_path}/filtered_files'
        os.makedirs(self.filtered_files_path, exist_ok = True)

        cve_list_path = f'{self.module_root_path}/cve_list'
        
        cve_list = [
            cve for cve in self.cve_data_all if
            'collected_commit' in self.cve_data_all[cve] and
            'components' in self.cve_data_all[cve] and
            'Function' in self.cve_data_all[cve]['components'] and
            cve not in cve_list_done
        ]
        keywords = {}
        for cve in tqdm.tqdm(cve_list):
            functions = self.cve_data_all[cve]['components']['Function']
            tp = list({
                keyword.lower()
                for func in functions
                for keyword in func.replace('::', ' ').replace(':', ' ').split(' ')
                if keyword.lower() not in ['driver', 'implementation', 'function', 'api', 'xml', 'check', 'tensor', 'control', 'component', 'server', 'inference', 'code', 'key', 'and', 'http', 'condition', 'race', 'connect', 'release', 'std', 'move', 'version', 'shape', 'scsi', 'generic', 'kernel', 'management', 'password', 'interface', 'designer', 'form', 'mysql', 'client', 'dim', 'xsd', 'processor', 'data', 'html', 'node', 'uri', 'destruction', 'variable', 'routines', 'new', 'file', 'step', 'hash', 'call', 'search', 'test', 'where', 'net', 'remote', 'build', 'the', 'edit', 'random', 'number', 'block', 'overview', 'constant', 'optimizer', 'jpeg', 'marker', 'docker', 'git', 'module', 'error', 'messages', 'handling', 'bind', 'add', 'clone', 'int,', 'null', 'input', 'results', 'byte[],', 'plugin', 'logs', 'create', 'users', 'kvm', 'bcopy', 'close', 'match', 'jwt', 'course', 'format', 'filter', 'bzero', 'parallel', 'socket', 'snap', 'task', 'set', 'networking', 'traffic', 'subsystem', 'initialize', 'content', 'matrix', 'sparse', 'view', 'quiz', 'common', 'savedmodel', 'tensorshape', 'gem', 'protection', 'string', 'dumps', 'core', 'userspace', 'enable', 'fast', 'tcp', 'device', 'drivers', 'open', 'words', 'chars', 'run', 'ioctl', 'endpoint', 'operate', 'operate', 'get', 'put', 'provider', 'compiler', 'xla', 'buffer', 'write', 'saved_model_cli', 'parse', 'name', 'openssl', 'checking', 'read', 'command', 'rate', 'vulnerability', 'math', 'load', 'png', 'mode', 'video', 'json', 'sql', 'css', 'rule', 'svg', 'dot', 'image', 'mount', 'default', 'pair', 'generate'] and len(keyword) > 2
            })
            if tp:
                keywords[cve] = tp
        save_json(f'{self.module_root_path}/keywords.json', keywords)
        
        self.cve_list = list(keywords.keys())
        save_text(cve_list_path, self.cve_list)
        save_pickle(f'{cve_list_path}.pkl', self.cve_list)
        # print(len(self.cve_list))


    def filter_files(self):
        res_path = f'{self.module_root_path}/filtered_files'
        if os.path.exists(f'{res_path}.pkl'):
            return load_pickle(f'{res_path}.pkl')

        keywords = load_json(f'{self.module_root_path}/keywords.json')
        res = {}
        for cve in tqdm.tqdm(self.cve_list):
            if os.path.exists(f'{self.filtered_files_path}/{cve}.json'):
                tp = load_json(f'{self.filtered_files_path}/{cve}.json')
                for k in tp.copy():
                    if not tp[k]:
                        del tp[k]
                if tp:
                    res[cve] = tp
                continue
            res[cve] = {}
            for repo, _ in self.cve_data_all[cve]['collected_commit']:
                res[cve][repo] = []
                repo_updated = repo.replace('/', 'â€”')
                repo_path = f'{self.specified_repo_path}/{cve}/{repo_updated}'
                if not os.path.exists(repo_path):
                    print(f'{cve} {repo} not found')
                    continue
                for root_path, _, files in os.walk(repo_path):
                    for file in files:
                        full_path = f'{root_path}/{file}'
                        tp = len(f'{self.specified_repo_path}/{cve}/{repo_updated}/')
                        if not rule_based_filtering(full_path[tp:]):
                            continue
                        try:
                            content = load_file(full_path)
                            if any(keyword in content.lower() for keyword in keywords[cve]):
                                res[cve][repo].append(full_path[tp:])
                        except Exception as e:
                            pass
            save_json(f'{self.filtered_files_path}/{cve}.json', res[cve])
        
        save_json(f'{res_path}.json', res)
        save_pickle(f'{res_path}.pkl', res)
        return res
        
        # reduced_res = {}
        # for cve, v in res.items():
        #     for repo, files in v.items():
        #         if files:
        #             if cve not in reduced_res:
        #                 reduced_res[cve] = {}
        #             reduced_res[cve][repo] = files
        # return reduced_res