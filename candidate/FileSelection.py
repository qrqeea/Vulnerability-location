import os
import tqdm
import difflib
from util.io_util import load_pickle, save_text, save_json, save_pickle, load_json
from util.general_util import rule_based_filtering


class FileSelection:

    def __init__(self, module_root_path: str, cve_data_all: dict, repo_file_list: dict, threshold: float):
        self.module_root_path = module_root_path
        self.cve_data_all = cve_data_all
        self.repo_file_list = repo_file_list
        self.threshold = threshold

        os.makedirs(self.module_root_path, exist_ok = True)

        cve_list_path = f'{self.module_root_path}/cve_list'
        if os.path.exists(f'{cve_list_path}.pkl'):
            self.cve_list = load_pickle(f'{cve_list_path}.pkl')
        else:
            self.cve_list = [
                cve for cve in self.cve_data_all if
                'collected_commit' in self.cve_data_all[cve] and
                'components' in self.cve_data_all[cve] and
                'File' in self.cve_data_all[cve]['components']
            ]
            save_text(cve_list_path, self.cve_list)
            save_pickle(f'{cve_list_path}.pkl', self.cve_list)
        print(len(self.cve_list))    # 4899


    def filter_files(self):
        res_path = f'{self.module_root_path}/filtered_files_{self.threshold}'
        if os.path.exists(f'{res_path}.pkl'):
            return load_pickle(f'{res_path}.pkl')
        
        # filtered_files = load_pickle(f'{self.module_root_path}/filtered_files_substr.pkl') if os.path.exists(f'{self.module_root_path}/filtered_files_substr.pkl') else {}
        # similarity_table = load_pickle(f'{self.module_root_path}/similarity_table.pkl') if os.path.exists(f'{self.module_root_path}/similarity_table.pkl') else {}
        filtered_files = {}
        similarity_table = {}

        for cve in tqdm.tqdm(self.cve_list):
            components = self.cve_data_all[cve]['components']['File']
            for repo, sha in self.cve_data_all[cve]['collected_commit']:
                if cve in filtered_files and repo in filtered_files[cve]: continue
                tp = []
                file_list = self.repo_file_list[repo][sha]
                for file, isdir in file_list:
                    if isdir or not rule_based_filtering(file):
                        continue
                    file_lower = file.lower()
                    if any(component.lower() in file_lower for component in components):
                        tp.append(file)
                if tp:
                    if cve not in filtered_files:
                        filtered_files[cve] = {}
                    filtered_files[cve][repo] = tp
                    continue
                
                # 筛选相似度大于threshold的文件
                if not (cve in similarity_table and repo in similarity_table[cve]):
                    if cve not in similarity_table:
                        similarity_table[cve] = {}
                    similarity_table[cve][repo] = self.calc_similarity(components, self.repo_file_list[repo][sha])
                for _, file, similarity in similarity_table[cve][repo]:
                    if similarity >= self.threshold:
                        tp.append(file)
                if tp:
                    if cve not in filtered_files:
                        filtered_files[cve] = {}
                    filtered_files[cve][repo] = tp
        
        save_json(f'{self.module_root_path}/similarity_table.json', similarity_table)
        save_pickle(f'{self.module_root_path}/similarity_table.pkl', similarity_table)
        
        save_json(f'{res_path}.json', filtered_files)
        save_pickle(f'{res_path}.pkl', filtered_files)

        return filtered_files
    

    def calc_similarity(self, keywords: list, files: list):
        # components中包含'/'则匹配完整路径，否则只匹配文件名
        res = []
        for keyword in keywords:
            for full_path, isdir in files:
                if isdir or not rule_based_filtering(full_path):
                    continue
                file_lower = full_path.lower()
                file_name = file_lower.split('/')[-1]

                keyword_lower = keyword.lower()
                if '/' not in keyword:
                    keyword_lower = keyword_lower.split('/')[-1]
                    file_lower = file_name
                
                similarity = difflib.SequenceMatcher(None, keyword_lower, file_lower).ratio()
                if similarity >= 0.5:
                    res.append((keyword, full_path, similarity))
        return res