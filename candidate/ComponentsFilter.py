import os
import tqdm
import difflib
from util.io_util import load_pickle, save_text, save_json, save_pickle, load_json
from .FileSelection import FileSelection
from .FunctionSelection import FunctionSelection
from .ModuleSelection import ModuleSelection


class ComponentsFilter:

    def __init__(self, module_root_path: str, specified_repo_path: str, cve_data_all: dict, repo_file_list: dict, correct_commits: dict):
        self.module_root_path = module_root_path
        self.specified_repo_path = specified_repo_path
        self.cve_data_all = cve_data_all
        self.repo_file_list = repo_file_list
        self.correct_commits = correct_commits

        os.makedirs(self.module_root_path, exist_ok = True)

        self.file_component_dir = f'{self.module_root_path}/file'
        self.function_component_dir = f'{self.module_root_path}/function'
        self.module_component_dir = f'{self.module_root_path}/module'


    def start(self):
        fileSelection = FileSelection(
            module_root_path = self.file_component_dir,
            cve_data_all = self.cve_data_all,
            repo_file_list = self.repo_file_list,
            threshold = 0.8
        )
        file_res = fileSelection.filter_files()
        # self.check_recall(file_res)
        
        functionSelection = FunctionSelection(
            module_root_path = self.function_component_dir,
            specified_repo_path = self.specified_repo_path,
            cve_data_all = self.cve_data_all,
            cve_list_done = list(file_res.keys())
        )
        function_res = functionSelection.filter_files()
        # self.check_recall(function_res)

        # self.check_recall(self.union_result([file_res, function_res]))

        cve_list_done = list(set(file_res.keys() | set(function_res.keys())))
        print(len(cve_list_done))   # 6169
        moduleSelection = ModuleSelection(
            module_root_path = self.module_component_dir,
            specified_repo_path = self.specified_repo_path,
            cve_data_all = self.cve_data_all,
            cve_list_done = cve_list_done,
            repo_file_list = self.repo_file_list
        )
        module_res = moduleSelection.filter_files()
        # self.check_recall(module_res)

        union_res = self.union_result([file_res, function_res, module_res])
        self.check_recall(union_res)


    def check_recall(self, filter_files: dict):
        total_count = 0
        correct_cnt = 0
        for cve, v in filter_files.items():
            total_count += 1
            f = False
            for repo, files in v.items():
                if not (cve in self.correct_commits and repo in self.correct_commits[cve]):
                    continue
                ans = self.correct_commits[cve][repo]
                if ans in files:
                    f = True
                    break
                else:
                    pass
            if f:
                correct_cnt += 1
                    
        print('{:.2f}%'.format(correct_cnt / total_count * 100), f'({correct_cnt}/{total_count})')


    def union_result(self, dict_list: list):
        res_path = f'{self.module_root_path}/filtered_files'
        # if os.path.exists(f'{res_path}.pkl'):
        #     return load_pickle(f'{res_path}.pkl')
        res = {}
        for dict in dict_list:
            for cve, v in dict.items():
                for repo, files in v.items():
                    if cve not in res:
                        res[cve] = {}
                    if repo not in res[cve]:
                        res[cve][repo] = files
                    else:
                        res[cve][repo] = list(set(res[cve][repo]) | set(files))
        save_json(f'{res_path}.json', res)
        save_pickle(f'{res_path}.pkl', res)
        return res