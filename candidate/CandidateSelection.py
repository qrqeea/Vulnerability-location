import os
import sys
import tqdm
import random
from util.io_util import *
from util.general_util import *
from util.similarity_util import *
from .FileSelection import FileSelection
from .FunctionSelection import FunctionSelection
from .ModuleSelection import ModuleSelection


class CandidateSelection:

    def __init__(self, module_root_path: str, gt_content_path: str, repo_path: str, cve_data_all: dict, repo_file_list: dict):
        self.module_root_path = module_root_path
        self.gt_content_path = gt_content_path
        self.repo_path = repo_path
        self.cve_data_all = cve_data_all
        self.repo_file_list = repo_file_list

        os.makedirs(self.module_root_path, exist_ok = True)

        # self.candidate_content_dir = f'{self.module_root_path}/candidate_content'
        # os.makedirs(self.candidate_content_dir, exist_ok = True)

        self.file_component_dir = f'{self.module_root_path}/file'
        self.function_component_dir = f'{self.module_root_path}/function'
        self.module_component_dir = f'{self.module_root_path}/module'


    def start(self):
        fileSelection = FileSelection(
            module_root_path = self.file_component_dir,
            cve_data_all = self.cve_data_all,
            repo_file_list = self.repo_file_list
        )
        file_res, cve_list_done = fileSelection.retrieve(3, 0.7)
        # self.check_recall(file_res)
        # print(233, len(cve_list_done))
        
        functionSelection = FunctionSelection(
            module_root_path = self.function_component_dir,
            repo_path = self.repo_path,
            cve_data_all = self.cve_data_all,
            cve_list_done = cve_list_done
        )
        function_res = functionSelection.retrieve()
        # self.check_recall(function_res)

        self.check_recall(self.union_result([file_res, function_res]))
        
        # save_pickle(f'{self.module_component_dir}/cve_list_5924.pkl', cve_list_done)
        cve_list_done = load_pickle(f'{self.module_component_dir}/cve_list_5924.pkl')

        # cve_list_done = list(set(file_res.keys() | set(function_res.keys())))
        # print(233, len(cve_list_done))
        moduleSelection = ModuleSelection(
            module_root_path = self.module_component_dir,
            repo_path = self.repo_path,
            cve_data_all = self.cve_data_all,
            cve_list_done = cve_list_done,
            repo_file_list = self.repo_file_list
        )
        module_res = moduleSelection.retrieve()
        self.check_recall(module_res)

        union_res = self.union_result([file_res, function_res, module_res])
        self.check_recall(union_res)


    def union_result(self, dict_list: list):
        res = {}
        for dict in dict_list:
            for cve, v in dict.items():
                for repo, files in v.items():
                    if cve not in res:
                        res[cve] = {}
                    if repo not in res[cve]:
                        res[cve][repo] = files
                    else:
                        res[cve][repo] = list(set(res[cve][repo]) | set(files))
        save_json(f'{self.module_root_path}/filtered_files.json', res)
        save_pickle(f'{self.module_root_path}/filtered_files.pkl', res)
        return res


    def check_recall(self, data: dict):
        incorrect_cve_list = []
        for cve, v in data.items():
            flag = False
            vul_file = self.cve_data_all[cve]['collected_commit'][2]
            for _, file_candidates in v.items():
                if vul_file in file_candidates:
                    flag = True
            if not flag:
                incorrect_cve_list.append(cve)
        
        total_count = len(data)
        correct_cnt = total_count - len(incorrect_cve_list)
        print('{:.2f}%'.format(correct_cnt / total_count * 100), f'({correct_cnt}/{total_count})')