import os
import sys
import tqdm
import random
import difflib
from util import *

class CandidateSelection:

    def __init__(self, project_root_path: str, module_root_path: str, cve_data_all: dict, repo_file_list: dict):
        self.project_root_path = project_root_path
        self.module_root_path = module_root_path
        self.cve_data_all = cve_data_all
        self.repo_file_list = repo_file_list

        os.makedirs(self.module_root_path, exist_ok = True)
        self.cve_list_dir = f'{self.module_root_path}/cve_list'
        os.makedirs(self.cve_list_dir, exist_ok = True)


    def start(self):
        # res = self.select_by_single_component('File', 50)
        # res = self.select_by_single_component('Module')
        # res = self.select_by_single_component('Function')
        # self.check_accuracy(res, 1)

        res = self.select_by_file_and_function()


    def filter_cve_list(self, component_type_list: list):
        file_path = f'{self.cve_list_dir}/{component_type_list}'
        if os.path.exists(file_path):
            return load_pickle(f'{file_path}.pkl')
        
        cve_list = []
        for cve, v in self.cve_data_all.items():
            components = v.get('components')
            if components:
                collected_commit = v.get('collected_commit')
                if all(components.get(component_type) for component_type in component_type_list) and collected_commit:
                    cve_list.append(cve)
        save_text(file_path, cve_list)
        save_pickle(f'{file_path}.pkl', cve_list)
        return cve_list


    def select_by_single_component(self, component_type: str, k: int, cve_list: list = None):
        component_type_list = [component_type]
        if not cve_list:
            cve_list = self.filter_cve_list(component_type_list)
        res_path = f'{self.module_root_path}/candidates_with_{component_type_list}_component_{len(cve_list)}_{k}.json'
        if os.path.exists(res_path):
            return load_json(res_path)

        def select_by_single_component_sub(cve_list_sub: list):
            for cve in tqdm.tqdm(cve_list_sub):
            # for cve in random.sample(cve_list, 5):
            # for cve in ['CVE-2018-15178']:
                file_components = self.cve_data_all[cve].get('components').get(component_type)
                collected_commit = self.cve_data_all[cve].get('collected_commit')

                res[cve] = {}
                for repo, commit in collected_commit:
                    repo_file_list = self.repo_file_list[(repo, commit)]
                    related_files = self.find_related_files(component_type, file_components, repo_file_list, k)
                    res[cve][repo] = related_files

        res = {}
        multi_thread(cve_list, select_by_single_component_sub, chunk_size = 200)
        # multi_thread(random.sample(cve_list, 10), select_by_component_sub, chunk_size = 50)
        save_json(res_path, res)
        return res
    

    def check_accuracy(self, data: dict, size: int):
        count = 0
        for cve, v in data.items():
            flag = False
            for _, triple_list in v.items():
                file_list = [item[1] for item in triple_list[:size]]
                ans_list = self.cve_data_all[cve]['files']
                if (any(file.lower() == ans.lower() for file in file_list for ans in ans_list)):
                    flag = True
                    # print(cve)
                    break
            if flag:
                count += 1
        
        print(size, ':{:.2f}%,'.format(count / len(data) * 100), f'{count}/{len(data)}')        


    def find_related_files(self,  component_type: str, keywords: list, files: list, k: int):
        # components中包含/则匹配完整路径，否则只匹配文件名
        res = []
        for keyword in keywords:
            for file in files:
                if component_type == 'File':
                    if '/' in keyword:
                        keyword_update = keyword.lower()
                        file_update = file.lower()
                    else:
                        keyword_update = keyword.split('/')[-1].lower()
                        file_update = file.split('/')[-1].lower()
                elif component_type == 'Module':
                    keyword_update = keyword.lower()
                    file_update = file.lower()
                elif component_type == 'Function':
                    keyword_update = keyword.lower()
                    file_update = file.lower()
                similarity = difflib.SequenceMatcher(None, keyword_update, file_update).ratio()
                res.append((keyword, file, similarity))
        sorted_res = sorted(res, key = lambda x: x[2], reverse = True)
        return sorted_res[:k]
    

    def select_by_file_and_function(self):
        cve_list = self.filter_cve_list(['File', 'Function'])
        # print(len(cve_list))
        res = self.select_by_single_component('File', 100, cve_list)
        # self.check_accuracy(res, 1)

        tp_list = []
        new_res = {}
        for cve in tqdm.tqdm(['CVE-2016-8858', 'CVE-2011-2906', 'CVE-2018-3739']):
        # for cve in tqdm.tqdm(cve_list):
            new_res[cve] = {}
            for repo, sha in self.cve_data_all[cve]['collected_commit']:
                repo_update = repo.replace('/', '—')
                path = f'/Volumes/NVD/experiment_data/datasets/repository_clone/target/{cve}/{repo_update}'
                if not os.path.exists(path):
                    print('repo not exist', cve, repo)
                
                new_res[cve][repo] = []
                for index, triple in enumerate(res[cve][repo]):
                    file_path = f'{path}/{triple[1]}'
                    # print(file_path)
                    if not os.path.exists(file_path):
                        print('error', cve, repo)
                        sys.exit()
                        # tp_list.append((cve, repo, sha))
                        # break
                    if os.path.isdir(file_path): continue
                    if len(new_res[cve][repo]) < 5:
                        new_res[cve][repo].append(triple)
                        continue
                    try:
                        content = load_file(file_path).lower()
                        # TODO 这里只是简单的判断是否有这个函数名，有可能是函数调用，并不一定是函数定义
                        if any(function.lower() in content for function in self.cve_data_all[cve]['components']['Function']):
                            new_res[cve][repo].append(triple)
                            print('yes', cve, repo, file_path)
                    except Exception as e:
                        print(file_path, e)
                    # if index > 50:
                    #     break

        save_json('test_module/tp.json', new_res)
        self.check_accuracy(new_res, 10)
        self.check_accuracy(new_res, 50)

        # print(len(tp_list))
        # save_text('test_module/cve_list_tp', tp_list)
        # save_pickle('test_module/cve_list_tp.pkl', tp_list)