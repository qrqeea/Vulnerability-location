import os
import sys
import ast
import tqdm
import random
from util.io_util import *
from util.general_util import *
from util.similarity_util import *
from .ComponentsFilter import ComponentsFilter


class CandidateSelection:

    def __init__(self, module_root_path: str, specified_repo_path: str, cve_data_all: dict, repo_file_list: dict, correct_commits: dict):
        self.module_root_path = module_root_path
        self.specified_repo_path = specified_repo_path
        self.cve_data_all = cve_data_all
        self.repo_file_list = repo_file_list
        self.correct_commits = correct_commits

        os.makedirs(self.module_root_path, exist_ok = True)

        self.components_dir = f'{self.module_root_path}/components'
        os.makedirs(self.components_dir, exist_ok = True)

        self.full_file_dir = f'{self.module_root_path}/full_file'
        os.makedirs(self.full_file_dir, exist_ok = True)

        self.prompt_components = f'{self.module_root_path}/prompt_components'
        os.makedirs(self.prompt_components, exist_ok = True)

        self.prompt_full_file = f'{self.module_root_path}/prompt_full_file'
        os.makedirs(self.prompt_full_file, exist_ok = True)
        
        self.result_components = f'{self.module_root_path}/result_components'
        os.makedirs(self.result_components, exist_ok = True)

        self.result_full_file = f'{self.module_root_path}/result_full_file'
        os.makedirs(self.result_full_file, exist_ok = True)


    def start(self):
        componentsFilter = ComponentsFilter(
            self.components_dir,
            self.specified_repo_path,
            self.cve_data_all,
            self.repo_file_list,
            self.correct_commits
        )
        componentsFilter.start()
        
        self.get_candidates()
        # self.check_candidates_recall()
        

    def get_candidates(self):
        self.generate_prompt()
        self.count_total_token(self.prompt_components)
        self.count_total_token(self.prompt_full_file)


        prompt_files = os.listdir(f'{self.module_root_path}/prompt')
        if '.DS_Store' in prompt_files:
            prompt_files.remove('.DS_Store')

        def get_candidates_sub(prompt_files_sub: list):
            for file in tqdm.tqdm(prompt_files_sub):
            # for file in tqdm.tqdm(random.sample(prompt_files_sub, 1)):
                if os.path.exists(f'{self.result_dir}/{file}'):
                    continue
                prompt = load_file(f'{self.prompt_dir}/{file}')
                if calc_token(prompt) > 16385:
                    continue
                try:
                    res = query_openai(prompt)    # model = 'gpt-4o-2024-05-13'
                    save_text(f'{self.result_dir}/{file}', res)
                except Exception as e:
                    save_text(f'{self.result_dir}/error_list', f'{file}\n\n{e}', 'a')

        multi_thread(prompt_files, get_candidates_sub, chunk_size = 800)


    def generate_prompt(self):
        # 先生成用components筛选过的CVE（约6000）
        prompt_template = load_file(f'{self.module_root_path}/prompt_select_candidates')
        
        filtered_files = load_pickle(f'{self.components_dir}/filtered_files.pkl')
        for cve, v in filtered_files.items():
            for repo, files in v.items():
                if len(files) == 1:
                    continue
                prompt = prompt_template.replace(
                    '{vulnerability description}',
                    self.cve_data_all[cve]['complete_description'] if 'complete_description' in self.cve_data_all[cve] else self.cve_data_all[cve]['original_description']
                    ).replace(
                        '{file list}',
                        str(files)
                    )
                repo_updated = repo.replace('/', '—')
                save_text(f'{self.prompt_components}/{cve}_{repo_updated}', prompt)

        rest_cve_list = [cve
            for cve, v in self.cve_data_all.items()
            if 'collected_commit' in v and cve not in filtered_files
        ]
        for cve in rest_cve_list:
            for repo, sha in self.cve_data_all[cve]['collected_commit']:
                files = [
                    file
                    for file, isdir in self.repo_file_list[repo][sha]
                    if not isdir and rule_based_filtering(file)
                ]
                prompt = prompt_template.replace(
                    '{vulnerability description}',
                    self.cve_data_all[cve]['complete_description'] if 'complete_description' in self.cve_data_all[cve] else self.cve_data_all[cve]['original_description']
                    ).replace(
                        '{file list}',
                        str(files)
                    )
                repo_updated = repo.replace('/', '—')
                save_text(f'{self.prompt_full_file}/{cve}_{repo_updated}', prompt)
        

    def count_total_token(self, prompt_dir):
        total = 0
        for file in tqdm.tqdm(os.listdir(prompt_dir)):
            if file in ['.DS_Store']: continue
            token = calc_token(load_file(f'{prompt_dir}/{file}'))
            if token > 16385:
                print(file, token)
            total += token
        token_M = int(total / 1000000)
        print(f'total token: {token_M}M, gpt-3 price: {token_M * 0.5}$')
        print(f'total token: {token_M}M, gpt-4 price: {token_M * 5}$')


    def check_candidates_recall(self):
        result_files = os.listdir(f'{self.module_root_path}/result')
        if '.DS_Store' in result_files:
            result_files.remove('.DS_Store')
        total_count = 0
        correct_cnt = 0
        candidates = {}         # 只保留有多个候选文件的CVE
        incorrect_cve_list = []
        for file in result_files:
            try:
                res = load_file(f'{self.result_dir}/{file}')
                res = ast.literal_eval(res)
                # res = list(set(res))
                # repo = self.cve_data_all[file]['collected_commit'][0]
                # sha = self.cve_data_all[file]['collected_commit'][1]
                # for candidate in res.copy():
                #     if (candidate, False) not in self.repo_file_list[repo][sha]:
                #         res.remove(candidate)
                # with open(f'{self.result_dir}/{file}', 'w') as f:
                    # print(res, file = f)
                total_count += 1
                vul_file = self.cve_data_all[file]['collected_commit'][2]
                if vul_file in res:
                    correct_cnt += 1
                    if len(res) > 1:
                        candidates[file] = res
                else:
                    incorrect_cve_list.append(file)
                    # print('vul_file:', vul_file)
                    # print(res)
                    # print(f'{self.prompt_dir}/{file}')
                    # print(f'{self.result_dir}/{file}')
                    # print('____________________________________')
            except Exception as e:
                print(f'{self.result_dir}/{file}', e)
                # save_text(f'{self.result_dir}/parser_error_list', f'{file}\n\n{e}', 'a')
                # with open(f'{self.result_dir}/{file}', 'r') as f:
                #     data = f.readlines()
                #     res = []
                #     for i in data:
                #         i = i.strip()
                #         if i != '```':
                #             res.append(i.strip())
                # with open(f'{self.result_dir}/{file}', 'w') as f:
                #     print(res, file = f)
        
        print('{:.2f}%'.format(correct_cnt / total_count * 100), f'({correct_cnt}/{total_count})')
        correct_cnt = 6034 - len(incorrect_cve_list) - 595
        print('total: {:.2f}%'.format(correct_cnt / 6034 * 100), f'({correct_cnt}/{6034})')
        save_text(f'{self.module_root_path}/retry_cve_list', incorrect_cve_list)
        save_pickle(f'{self.module_root_path}/retry_cve_list.pkl', incorrect_cve_list)
        
        save_json(f'{self.module_root_path}/candidates.json', candidates)
        save_pickle(f'{self.module_root_path}/candidates.pkl', candidates)


    # def check_recall(self, data: dict):
    #     incorrect_cve_list = []
    #     for cve, v in data.items():
    #         flag = False
    #         vul_file = self.cve_data_all[cve]['collected_commit'][2]
    #         for _, file_candidates in v.items():
    #             if vul_file in file_candidates:
    #                 flag = True
    #         if not flag:
    #             incorrect_cve_list.append(cve)
        
    #     total_count = len(data)
    #     correct_cnt = total_count - len(incorrect_cve_list)
    #     save_text(f'{self.module_root_path}/filter_incorrect_cve_list', incorrect_cve_list)
    #     save_pickle(f'{self.module_root_path}/filter_incorrect_cve_list.pkl', incorrect_cve_list)
    #     print('{:.2f}%'.format(correct_cnt / total_count * 100), f'({correct_cnt}/{total_count})')