import os
import tqdm
import difflib
from util.io_util import load_pickle, save_text, save_json, save_pickle, load_json
from util.general_util import rule_based_filtering
from util.similarity_util import *
from util.general_util import rule_based_filtering


class ModuleSelection:

    def __init__(self, module_root_path: str, repo_path: str, cve_data_all: dict, cve_list_done: list, repo_file_list: dict):
        self.module_root_path = module_root_path
        self.repo_path = repo_path
        self.cve_data_all = cve_data_all
        self.repo_file_list = repo_file_list

        os.makedirs(self.module_root_path, exist_ok = True)

        cve_list_path = f'{self.module_root_path}/cve_list'
        
        self.cve_list = [
            cve for cve in self.cve_data_all if
            'collected_commit' in self.cve_data_all[cve] and
            'Module' in self.cve_data_all[cve]['components'] and
            cve not in cve_list_done
        ]
        save_text(cve_list_path, self.cve_list)
        save_pickle(f'{cve_list_path}.pkl', self.cve_list)
        print(len(self.cve_list))


    def retrieve(self):
        cnt = 0
        res = {}
        for cve in tqdm.tqdm(self.cve_list):
            f = False
            repo = self.cve_data_all[cve]['collected_commit'][0]
            sha = self.cve_data_all[cve]['collected_commit'][1]
            vul_file = self.cve_data_all[cve]['collected_commit'][2]
            components = self.cve_data_all[cve]['components']['Module']
            filtered_files = []
            # for item in vul_file.split('/')[:-1]:
                # if item.lower() in self.cve_data_all[cve]['original_description'].lower():
                #     f = True
                # if 'complete_description' in self.cve_data_all[cve] and item.lower() in self.cve_data_all[cve]['complete_description'].lower():
                #     f = True
                # if any(item.lower() == component.lower() for component in self.cve_data_all[cve]['components']['Module']):
                #     f = True
            for dir_path, isdir in self.repo_file_list[repo][sha]:
                if isdir:
                    last = dir_path.split('/')[-1]
                    if any(last.lower() == component.lower() for component in components):
                        repo_updated = repo.replace('/', 'â€”')
                        repo_path = f'{self.repo_path}/{cve}/{repo_updated}'
                        for root_path, _, files in os.walk(f'{repo_path}/{dir_path}'):
                            for file in files:
                                if rule_based_filtering(file, root_path[len(repo_path) + 1:]):
                                    filtered_files.append(root_path[len(repo_path) + 1:] + '/' + file)
            if filtered_files:
                res[cve] = {}
                res[cve][repo] = filtered_files
            # if f:
            #     cnt += 1
        # print(cnt)
        save_json(f'{self.module_root_path}/filtered_files.json', res)
        save_pickle(f'{self.module_root_path}/filtered_files.pkl', res)
        return res