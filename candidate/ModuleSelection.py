import os
import sys
import tqdm
from util.io_util import load_pickle, save_text, save_json, save_pickle, load_json
from util.general_util import rule_based_filtering
from util.similarity_util import *
from util.general_util import rule_based_filtering


class ModuleSelection:

    def __init__(self, module_root_path: str, specified_repo_path: str, cve_data_all: dict, cve_list_done: list, repo_file_list: dict):
        self.module_root_path = module_root_path
        self.specified_repo_path = specified_repo_path
        self.cve_data_all = cve_data_all
        self.repo_file_list = repo_file_list

        os.makedirs(self.module_root_path, exist_ok = True)

        cve_list_path = f'{self.module_root_path}/cve_list'
        
        self.cve_list = [
            cve for cve in self.cve_data_all if
            'collected_commit' in self.cve_data_all[cve] and
            'components' in self.cve_data_all[cve] and
            'Module' in self.cve_data_all[cve]['components'] and
            cve not in cve_list_done
        ]
        save_text(cve_list_path, self.cve_list)
        save_pickle(f'{cve_list_path}.pkl', self.cve_list)
        print(len(self.cve_list))


    def filter_files(self):
        res_path = f'{self.module_root_path}/filtered_files'
        if os.path.exists(f'{res_path}.pkl'):
            return load_pickle(f'{res_path}.pkl')

        res = {}
        for cve in tqdm.tqdm(self.cve_list):
        # for cve in tqdm.tqdm(['CVE-2021-32621']):
            # components = [ tp.lower()
            #     for item in self.cve_data_all[cve]['components']['Module']
            #     for tp in item.split(' ')
            # ]
            components = [ item.lower()
                for item in self.cve_data_all[cve]['components']['Module']
            ]
            for repo, sha in self.cve_data_all[cve]['collected_commit']:
                # filtered_files = set()
                selected_dirs = []
                for dir_path, isdir in self.repo_file_list[repo][sha]:
                    if not isdir: continue
                    last = dir_path.split('/')[-1].lower()
                    if any(last == component for component in components):
                        selected_dirs.append(dir_path)
                if not selected_dirs:
                    continue
                filtered_files = set()
                for file, isdir in self.repo_file_list[repo][sha]:
                    if isdir or not rule_based_filtering(file): continue
                    if any(file[:len(dir)] == dir for dir in selected_dirs):
                        filtered_files.add(file)
                if filtered_files:
                    tp = load_pickle('/Volumes/NVD/experiment_data/commit/correct_commits.pkl')
                    if cve in tp and repo in tp[cve]:
                        ans = tp[cve][repo]
                        if ans not in filtered_files:
                            pass
                            # print(cve, components, ans)
                            # print(f'/Volumes/NVD/experiment_data/extraction/extract_result/{cve}\n')
                    if cve not in res:
                        res[cve] = {}
                    res[cve][repo] = list(filtered_files)
                # elif f:
                #     
                #     if cve in tp and repo in tp[cve]:
                #         print(cve, components, tp[cve][repo])
                #         sys.exit()
        save_json(f'{res_path}.json', res)
        save_pickle(f'{res_path}.pkl', res)
        return res