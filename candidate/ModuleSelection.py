import os
import tqdm
import difflib
from util.io_util import load_pickle, save_text, save_json, save_pickle, load_json
from util.general_util import rule_based_filtering
from util.similarity_util import *


class ModuleSelection:

    def __init__(self, module_root_path: str, repo_path: str, cve_data_all: dict, cve_list_done: list):
        self.module_root_path = module_root_path
        self.repo_path = repo_path
        self.cve_data_all = cve_data_all

        os.makedirs(self.module_root_path, exist_ok = True)

        cve_list_path = f'{self.module_root_path}/cve_list'
        if os.path.exists(f'{cve_list_path}.pkl'):
            self.cve_list = load_pickle(f'{cve_list_path}.pkl')
        else:
            self.cve_list = [
                cve for cve in self.cve_data_all if
                'collected_commit' in self.cve_data_all[cve] and
                'Module' in self.cve_data_all[cve]['components'] and
                cve not in cve_list_done
            ]
            save_text(cve_list_path, self.cve_list)
            save_pickle(f'{cve_list_path}.pkl', self.cve_list)
        print(len(self.cve_list))    # 726


    def retrieve(self):
        cnt = 0
        for cve in tqdm.tqdm(self.cve_list):
            f = False
            file = self.cve_data_all[cve]['collected_commit'][2]
            for item in file.split('/')[:-1]:
                # if item.lower() in self.cve_data_all[cve]['original_description'].lower():
                #     f = True
                # if 'complete_description' in self.cve_data_all[cve] and item.lower() in self.cve_data_all[cve]['complete_description'].lower():
                #     f = True
                if any(item.lower() == component.lower() for component in self.cve_data_all[cve]['components']['Module']):
                    f = True
            if f:
                cnt += 1
        print(cnt)