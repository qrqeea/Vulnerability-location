import os
import tqdm
import random
from util.io_util import *
from util.general_util import *
from util.similarity_util import *


class DirectGPT:

    def __init__(self, module_root_path: str, type: str, cve_data_all: dict, correct_commits: dict):
        self.module_root_path = module_root_path
        self.type = type
        self.cve_data_all = cve_data_all
        self.correct_commits = correct_commits

        if type == "OVERALL":
            # 8859
            self.cve_list = list(cve_data_all.keys())
        elif type == "NO_REPO":
            # 114
            self.cve_list = [
            cve
            for cve in self.cve_data_all
            if 'collected_commit' not in self.cve_data_all[cve]
        ]
        elif type == "ABLATION":
            # 5920
            self.cve_list = [
                cve
                for cve in self.cve_data_all
                if 'complete_description' in self.cve_data_all[cve]
            ]
        print(len(self.cve_list))

        os.makedirs(self.module_root_path, exist_ok = True)

        self.prompt_dir = f'{self.module_root_path}/prompt'
        os.makedirs(self.prompt_dir, exist_ok = True)

        self.result_dir = f'{self.module_root_path}/result'
        os.makedirs(self.result_dir, exist_ok = True)


    def start(self):
        self.generate_prompt()
        self.count_total_tokens()
        self.query_gpt()
        self.check_result()


    def generate_prompt(self):
        prompt_teplate = load_file(f'{self.module_root_path}/prompt_template')

        for cve in tqdm.tqdm(self.cve_list):
            desc = self.cve_data_all[cve]['original_description']
            # 只有end-to-end使用原始描述
            if self.type != "OVERALL" and 'complete_description' in self.cve_data_all[cve]:
                desc = self.cve_data_all[cve]['complete_description']

            prompt = prompt_teplate.replace('{CVE}', cve).replace('{description}', desc)
            # prompt = prompt.replace('{CPE}', self.cve_data_all[cve]['cpe_uri'][0])
            # prompt = prompt.replace('{url}', '\n'.join(self.cve_data_all[cve]['reference_list']))
            save_text(f'{self.prompt_dir}/{cve}', prompt)


    def query_gpt(self):
        cve_list_done = {
            cve for cve in os.listdir(f'{self.result_dir}')
            if cve not in ['.DS_Store', 'error_list']
        }
        cve_list = list(set(self.cve_list) - cve_list_done)
        print(f'rest cve list size: {len(cve_list)}')

        def query_gpt_sub(cve_list_sub: list):
            # for cve in tqdm.tqdm(random.sample(cve_list_sub, 1)):
            for cve in tqdm.tqdm(cve_list_sub):
                if os.path.exists(f'{self.result_dir}/{cve}'):
                    continue
                prompt = load_file(f'{self.prompt_dir}/{cve}')
                try:
                    res = query_openai(prompt, model = 'gpt-4o-2024-05-13')
                    save_text(f'{self.result_dir}/{cve}', res)
                except Exception as e:
                    save_text(f'{self.result_dir}/error_list', f'{cve}\n\n{e}', 'a')

        multi_thread(cve_list, query_gpt_sub, chunk_size = 1000)


    def check_result(self):
        totoal_cnt = 0
        correct_cnt = [0] * 10
        tp = load_pickle('/Volumes/NVD/experiment_data/retrieval/cve_list_single_candidate.pkl')
        for cve in tqdm.tqdm(tp):
            res_path = f'{self.result_dir}/{cve}'
            if not os.path.exists(res_path):
                continue
            res = load_file(res_path)
            res = res.replace('```json', '').replace('```', '')
            try:
                res = json.loads(res)
                totoal_cnt += 1
                repo = res['repository']
                f = False
                for repo2, vul_file in self.cve_data_all[cve]['vulnerability_files'].items():
                    if repo.lower() != repo2.lower():
                        continue
                    vul_file = vul_file[0].lower()
                    for index, file in enumerate(res['files']):
                        if file.lower() == vul_file:
                        # if file.lower() in vul_file or vul_file in file.lower():
                            correct_cnt[index] += 1
                            f = True
                            break
                if f: continue
                if cve not in self.correct_commits:
                    continue
                # for repo2, vul_file in self.correct_commits[cve].items():
                #     if repo.lower() != repo2.lower():
                #         continue
                #     vul_file = vul_file.lower()
                #     for index, file in enumerate(res['files']):
                #         if file.lower() == vul_file:
                #         # if file.lower() in vul_file or vul_file in file.lower():
                #             correct_cnt[index] += 1
                #             break
            except Exception as e:
                print(f'error, {cve}, {e}, {self.result_dir}/{cve}')
                continue
        
        sum = 0
        for index, cnt in enumerate(correct_cnt):
            sum += cnt / (index + 1)
            if index + 1 in [1, 3, 4, 5, 10]:
                print(f'k = {index + 1}', '{:.2f}%'.format(sum / totoal_cnt * 100), f'({sum}/{totoal_cnt})')


    def count_total_tokens(self):
        tokens = 0
        for cve in tqdm.tqdm(self.cve_list):
            prompt = load_file(f'{self.prompt_dir}/{cve}')
            token = calc_token(prompt, model = 'gpt-3.5-turbo')
            tokens += token
        token_K = int(tokens / 1000)
        print(f'total token: {token_K}K, gpt-3 price: {token_K * 0.0005}$')
        print(f'total token: {token_K}K, gpt-4 price: {token_K * 0.005}$')