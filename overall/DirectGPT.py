import os
import tqdm
import random
from util.io_util import *
from util.general_util import *
from util.similarity_util import *


class DirectGPT:

    def __init__(self, module_root_path: str, cve_data_all: dict, cve_list: list):
        self.module_root_path = module_root_path
        self.cve_data_all = cve_data_all
        self.cve_list = cve_list

        os.makedirs(self.module_root_path, exist_ok = True)

        self.prompt_dir = f'{self.module_root_path}/prompt'
        os.makedirs(self.prompt_dir, exist_ok = True)

        self.result_dir = f'{self.module_root_path}/result'
        os.makedirs(self.result_dir, exist_ok = True)


    def start(self):
        # self.generate_prompt()
        # self.count_total_tokens()
        # self.query_gpt()
        self.check_result()


    def generate_prompt(self):
        prompt_teplate = load_file(f'{self.module_root_path}/prompt_template')

        for cve in self.cve_list:
            prompt = prompt_teplate.replace('{CVE}', cve).replace('{description}', self.cve_data_all[cve]['original_description']).replace('{CPE}', self.cve_data_all[cve]['cpe_uri'][0]).replace('{url}', '\n'.join(self.cve_data_all[cve]['reference_list']))
            save_text(f'{self.prompt_dir}/{cve}', prompt)


    def query_gpt(self):
        cve_list_done = {
            cve for cve in os.listdir(f'{self.result_dir}')
            if cve not in ['.DS_Store', 'error_list']
        }
        cve_list = list(set(self.cve_list) - cve_list_done)
        print(f'rest cve list size: {len(cve_list)}')

        def query_gpt_sub(cve_list_sub: list):
            # for cve in tqdm.tqdm(random.sample(cve_list_sub, 4)):
            for cve in tqdm.tqdm(cve_list_sub):
                if os.path.exists(f'{self.result_dir}/{cve}'):
                    continue
                prompt = load_file(f'{self.prompt_dir}/{cve}')
                # token = calc_token(prompt, model = 'gpt-4-turbo')
                # if token > 128000:
                #     continue
                try:
                    res = query_openai(prompt, model = 'gpt-3.5-turbo')
                    save_text(f'{self.result_dir}/{cve}', res)
                except Exception as e:
                    save_text(f'{self.result_dir}/error_list', f'{cve}\n\n{e}', 'a')

        multi_thread(cve_list, query_gpt_sub, chunk_size = 1000)


    def check_result(self):
        totoal_cnt = 0
        correct_cnt = [0, 0, 0, 0, 0]
        for cve in os.listdir(self.result_dir):
            if cve in ['.DS_Store', 'error_list']:
                continue
            try:
                res = load_json(f'{self.result_dir}/{cve}')
                totoal_cnt += 1
                repo = res['repository']
                if repo in self.cve_data_all[cve]['vulnerability_files']:
                    for index, file in enumerate(res['files'][:5]):
                        if file == self.cve_data_all[cve]['vulnerability_files'][repo][0]:
                            # if index == 0:
                            #     print(cve, f'{self.result_dir}/{cve}')
                            correct_cnt[index] += 1
                # elif repo == self.cve_data_all[cve]['collected_commit'][0]:
                #     for index, file in enumerate(res['files'][:5]):
                #         if file == self.cve_data_all[cve]['collected_commit'][2]:
                #             correct_cnt[index] += 1
                else:
                    pass
                    # print(cve, f'{self.result_dir}/{cve}')
                    # print(ans)
                    # print()
            except Exception as e:
                print(f'error, {cve}, {e}, {self.result_dir}/{cve}')
        
        sum = 0
        for index, cnt in enumerate(correct_cnt):
            sum += cnt
            print(f'k = {index + 1}', '{:.2f}%'.format(sum / totoal_cnt * 100), f'({sum}/{totoal_cnt})')


    def count_total_tokens(self):
        cve_list_done = {
            cve for cve in os.listdir(f'{self.result_dir}')
            if cve not in ['.DS_Store', 'error_list']
        }
        cve_list = list(set(self.cve_list) - cve_list_done)
        print(f'rest cve list size: {len(cve_list)}')

        tokens = 0
        for cve in tqdm.tqdm(cve_list):
            prompt = load_file(f'{self.prompt_dir}/{cve}')
            token = calc_token(prompt, model = 'gpt-3.5-turbo')
            # if token > 128000:
            #     continue
            tokens += token
        token_M = int(tokens / 1000000)
        print(f'total token: {token_M}M, price: {token_M * 0.5}$')