import sys
import tqdm
import random
from util.io_util import *
from util.github_util import github_tokens, get_file_content

class GroundTruth:

    def __init__(self, module_root_path: str, original_gt: dict, commits_all: dict):
        self.module_root_path = module_root_path
        self.original_gt = original_gt
        self.commits_all = commits_all

        os.makedirs(self.module_root_path, exist_ok = True)

        self.gt_file_content_dir = f'{self.module_root_path}/gt_file_content'
        os.makedirs(self.gt_file_content_dir, exist_ok = True)

    
    def start(self):
        cleaned_gt = self.clean_original_gt()
        gt = self.generate_new_gt(cleaned_gt)
        self.get_gt_file(gt)


    def clean_original_gt(self):
        path = f'{self.module_root_path}/cleaned_ground_truth.pkl'
        if os.path.exists(path):
            return load_pickle(path)

        error_cve_list = [
            'CVE-2016-9840.', 'CVE-2016-9841.', 'CVE-2016-9842.', 'CVE-2016-9843.', 'CVE-2013-6488', 'CVE-2022-0177', 'CVE-2022-0227', 'CVE-2022-0329', 'CVE-2015-3208', 'CVE-2009-5146', 'CVE-2017-1000384', 'CVE-2017-0605', 'CVE-2019-15601', 'CVE-2019-10124', 'CVE-2019-1010224', 'CVE-2019-1010222', 'CVE-2019-5428', 'CVE-2021-28421', 'CVE-2020-26159', 'CVE-2018-4700', 'CVE-2018-1000845', 'CVE-2018-19270', 'CVE-2011-1161', 'CVE-2016-1000023', 'CVE-2016-5483', 'CVE-2016-5875', 'CVE-2018-14178', 'CVE-2022-1884', 'CVE-2021-25635', 'CVE-2013-3364', 'CVE-2019-15690', 'CVE-2021-30492', 'CVE-2014-4920', 'CVE-2013-7035', 'CVE-2020-XXXX', 'CVE-2019-17669', 'CVE-2016-1000008', 'CVE-2016-1000273', 'CVE-2014-5244', 'CVE-2016-1000305', 'CVE-2015-3413', 'CVE-2014-6061', 'CVE-2016-1000230'
        ]
        keys = list(self.original_gt.keys())
        for cve, repo in keys:
            if cve in error_cve_list:
                del self.original_gt[cve, repo]

        key = ('CVE-2019-17669 ', 'WordPress/WordPress')
        self.original_gt[('CVE-2019-17669', 'WordPress/WordPress')] = self.original_gt[key]
        del self.original_gt[key]

        print(len(self.original_gt))    # 9390
        cve_list = {cve for cve, _ in self.original_gt}
        print(len(cve_list))    # 8978

        save_pickle(path, self.original_gt)
        return self.original_gt
    

    def generate_new_gt(self, cleaned_gt: dict):
        path = f'{self.module_root_path}/ground_truth'
        if os.path.exists(f'{path}.json'):
            return load_json(f'{path}.json')

        res = {}
        for (cve, repo), file in cleaned_gt.items():
            if cve not in res:
                res[cve] = {}
            if 'vulnerability_files' not in res[cve]:
                res[cve]['vulnerability_files'] = {}
            res[cve]['vulnerability_files'][repo] = list(file)
            
            if 'commits' not in res[cve]:
                commits = set()
                for _, v in self.commits_all[cve].items():
                    commits |= v
                res[cve]['commits'] = list(commits)

        save_json(f'{path}.json', res)
        save_pickle(f'{path}.pkl', res)
        return res
    

    def get_gt_file(self, gt: dict):
        to_scrapy_list = set()
        for cve, v in gt.items():
            for repo, files in v['vulnerability_files'].items():
                for url in v['commits']:
                    if f'github.com/{repo}/commit/' not in url:
                        continue
                    sha = url[url.find('/commit/') + 8:]
                    to_scrapy_list |= {(cve, repo, file, sha) for file in files}
        save_text(f'{self.module_root_path}/gt_content_to_scrapy_list', to_scrapy_list)
        print(f'to_scrapy_list size: {len(to_scrapy_list)}')
         
        def get_gt_file_sub(to_scrapy_list_sub: list, token: str):
            for (cve, repo, file, sha) in tqdm.tqdm(to_scrapy_list_sub):
                dir = f'{self.gt_file_content_dir}/{cve}'
                tp1 = repo.replace('/', '-')
                tp2 = file.replace('/', '-')
                save_path = f'{dir}/{tp1}_{tp2}'
                if os.path.exists(save_path):
                    continue
                res = get_file_content(repo, sha, file, token)
                if res:
                    os.makedirs(dir, exist_ok = True)
                    save_text(save_path, res)
    
        # multi_thread(random.sample(list(to_scrapy_list), 10), get_gt_file_sub, tokens = github_tokens)
        multi_thread(list(to_scrapy_list), get_gt_file_sub, tokens = github_tokens)