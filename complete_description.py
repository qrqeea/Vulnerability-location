import os
import json
import tqdm
import importlib
from util import query_openai, get_domain, copy_file

config = {
    "particular_domain_list": [
        "lists.apache.org",
        "access.redhat.com",
        "lists.fedoraproject.org",
        "lists.debian.org",
        "www.debian.org",
        "lists.opensuse.org",
        "security.gentoo.org",
        "www.openwall.com",
        "bugzilla.redhat.com",
        "security.netapp.com",
        "huntr.dev",
        "seclists.org",
        "snyk.io",
        "packetstormsecurity.com",
        "www.redhat.com",
        "exchange.xforce.ibmcloud.com",
        "www.ubuntu.com",
        "jenkins.io",
        "marc.info",
        "www.exploit-db.com",
        "www.tenable.com"
    ],
    "not_handle_domain_list": [
        "ftp.caldera.com",
        "cert-portal.siemens.com"
    ]
}
modules = {}


def generate_prompt_list(cve: str):

    prompt_list = []
    # 存放数据的目录
    data_dir = f'experiment_data/267/completion_description_data/{cve}'
    if not os.path.exists(data_dir):
        os.mkdir(data_dir)

    filePath = f'./cvelist/cvelist_4571/{cve}.json'
    with open(filePath, 'r', encoding='utf-8') as f:
        data = json.load(f)['containers']['cna']
    # print(type(data))
    
    if 'references' in data.keys():
        references = data['references']
        refNumber = len(references)
        print(f'refNumber: {refNumber}')
        for dic in references:
            url = dic['url']
            domain = get_domain(url)
            if domain in config['particular_domain_list']:
                # print(domain)
                # 需要将域名中的.和-换成_
                module_name = domain.replace('.', '_').replace('-', '_')
                if module_name == 'www_debian_org':     # 同一个网站
                    module_name = 'lists_debian_org'
                if module_name not in modules.keys():
                    modules[module_name] = importlib.import_module(f'prompt_generator.{module_name}')
                prompt = modules[module_name].generate_prompt(url)
                if prompt != None:
                    prompt_list.append(prompt)
                    with open(f'{data_dir}/prompt_{domain}', 'a') as f:
                        print(prompt, file = f)

            elif domain in config['not_handle_domain_list']:
                pass
            else:   # 通用
                print(f'common url: {url}')
                from prompt_generator import common
                prompt = common.generate_prompt(url)
                if prompt != None and len(prompt) > 600:
                    prompt_list.append(prompt)
                    with open(f'{data_dir}/prompt_{domain}', 'a') as f:
                        print(prompt, file = f)

    else:
        print(f'error, {cve} references not exist')
    return prompt_list


def get_original_description(cve: str):
    descriptions = ''
    filePath = f'./cvelist/cvelist_4571/{cve}.json'
    with open(filePath, 'r', encoding='utf-8') as f:
        data = json.load(f)['containers']['cna']
    if 'descriptions' in data.keys():
        descriptions = data['descriptions'][0]['value']
    return descriptions


def complete_description_single(cve: str):
    with open('prompt_template/prompt_complete_description', 'r') as f:
        prompt_all = f.read()
    prompt_all = prompt_all.replace('{#original description#}', get_original_description(cve)) 

    data_dir = f'experiment_data/267/completion_description_data/{cve}'

    prompt_list = generate_prompt_list(cve)
    print(f"prompt_list_len: {len(prompt_list)}")
    for index, prompt in enumerate(prompt_list):
        if len(prompt) > 20000:     # 超出token上限先不处理
            continue
        print('querying openai...')
        res = query_openai(prompt)
        with open(f'{data_dir}/openai_res_{index}', 'w') as f:
            print(res, file = f)
        # 需要判断一下结果是不是'no result'或者内容长度太少
        if len(res) > 180:
            prompt_all += res + '\n\n'

    with open(f'{data_dir}/prompt_all', 'w') as f:
        print(prompt_all, file = f)
    
    res = query_openai(prompt_all)
    with open(f'{data_dir}/openai_res', 'w') as f:
        print(res, file = f)
    return res


def gather_result():
    dir = 'experiment_data/267/completion_description_data'
    for cve in os.listdir(dir):
        if 'CVE' not in cve:
            continue
        copy_file(f'{dir}/{cve}/openai_res', f'{dir}/descriptions/{cve}')


def complete_description(cve_list: list):
    print(len(cve_list))
    for cve in tqdm.tqdm(cve_list):
        # 已存在对应目录就认为已经完成补全
        if not os.path.exists(f'experiment_data/267/completion_description_data/{cve}'):
            print(f'current cve: {cve}')
            complete_description_single(cve)
    # gather_result()