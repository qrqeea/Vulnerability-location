import os
import csv
import tqdm
import importlib
import pandas as pd

from util.io_util import get_domain, save_text, save_json, save_pickle, count_range, multi_thread, load_json, calc_token

class Scrapy:
    
    def __init__(self, project_root_path: str, module_root_path: str, cve_data_all: dict):
        self.project_root_path = project_root_path
        self.module_root_path = module_root_path
        self.cve_data_all = cve_data_all
        
        self.cve_list = list(cve_data_all.keys())
        self.scrapy_module = {}
        self.domain_config = load_json('scrapy/domain_pattern.json')

        os.makedirs(self.module_root_path, exist_ok = True)

        self.scrapy_result = f'{self.module_root_path}/scrapy_result'
        os.makedirs(self.scrapy_result, exist_ok = True)

        self.scrapy_result_statistics = f'{self.module_root_path}/scrapy_result_statistics'
        os.makedirs(self.scrapy_result_statistics, exist_ok = True)

        self.domain_statistics = f'{self.module_root_path}/domain_statistics'
        os.makedirs(self.domain_statistics, exist_ok = True)

        self.error_list = f'{self.scrapy_result_statistics}/error_list.csv'
        if not os.path.exists(self.error_list):
            pd.DataFrame({
                'cve': [],
                'url': [],
                'domain': [],
                'text': []
            }).to_csv(
                self.error_list,
                index = False,
                quotechar = '"',
                quoting = csv.QUOTE_ALL
            )
        
        self.long_text = f'{self.scrapy_result_statistics}/long_text.csv'
        self.short_text = f'{self.scrapy_result_statistics}/short_text.csv'


    def start(self):
        self.count_url()
        self.scrapy_all_url()
        # self.count_scrapy_result()


    def count_url(self):
        domain_cve = {}
        domain_url = {}
        reference_len_list = []

        for cve in tqdm.tqdm(self.cve_list):
            url_list = self.cve_data_all[cve]['reference_list']
            reference_len_list.append(len(url_list))
            for url in url_list:
                domain = get_domain(url)
                if domain in domain_url:
                    domain_url[domain].add(url)
                    domain_cve[domain].add(cve)
                else:
                    domain_url[domain] = {url}
                    domain_cve[domain] = {cve}
        
        domain_url_count = {k: len(v) for k, v in domain_url.items()}
        domain_url_count = dict(sorted(domain_url_count.items(), key = lambda item: item[1], reverse = True))
        save_text(f'{self.domain_statistics}/domain_count', domain_url_count)

        domain_cve = {k: list(v) for k, v in domain_cve.items()}
        save_json(f'{self.domain_statistics}/domain_cve.json', domain_cve)
        save_pickle(f'{self.domain_statistics}/domain_cve.pkl', domain_cve)

        domain_url = {k: list(v) for k, v in domain_url.items()}
        save_json(f'{self.domain_statistics}/domain_url.json', domain_url)

        total_amount = sum(reference_len_list)
        print(f'url total amount: {total_amount}')
        print(f'cve average url amount: {total_amount / len(self.cve_list)}')
        
        distribution = count_range(reference_len_list, [2, 5, 10, 20, 50, 100])
        print(distribution)


    def get_module_name(self, domain: str):
        module_name = domain.replace('.', '_').replace('-', '_')
        if module_name == 'www_debian_org':
            module_name = 'lists_debian_org'
        elif module_name == 'h20566_www2_hpe_com':
            module_name = 'support_hpe_com'
        elif module_name == 'kb_cert_org':
            module_name = 'www_kb_cert_org'
        elif module_name in ['usn_ubuntu_com', 'ubuntu_com']:
            module_name = 'www_ubuntu_com'
        elif module_name == 'www_talosintelligence_com':
            module_name = 'talosintelligence_com'
        elif module_name == 'openwall_com':
            module_name = 'www_openwall_com'
        elif module_name == 'bugzilla_suse_com':
            module_name = 'bugzilla_redhat_com'
        elif module_name == 'launchpad_net':
            module_name = 'bugs_launchpad_net'
            
        return module_name


    def scrapy_single_url(self, cve: str, url: str, retry = False, save_to_error_list = True):
        domain = get_domain(url)
        state = 0           # 0表示无异常
        try:
            if domain in self.domain_config['particular_domain_list']:
                if domain in self.domain_config['add_suffix_domain_list']:
                    url += f'#{cve}'
                
                module_name = self.get_module_name(domain)
                # print(module_name)
                if module_name not in self.scrapy_module.keys():
                    self.scrapy_module[module_name] = importlib.import_module(f'scrapy.scrapy_module.{module_name}')
                res = self.scrapy_module[module_name].scrapy(url)
            elif domain in self.domain_config['not_handle_domain_list']:
                res = [url, domain, 0, '']
            else:
                # print(f'common url: {url}')
                from scrapy.scrapy_module import common
                res = common.scrapy(url)
        except Exception as e:
            if not retry:     # retry一次
                res = self.scrapy_single_url(cve, url, True)
                return res
            else:
                res = e
                state = 1
                if save_to_error_list:
                    df = pd.read_csv(self.error_list)
                    df.loc[len(df)] = [cve, url, domain, e]
                    df.to_csv(
                        self.error_list,
                        index = False, 
                        quotechar = '"',
                        quoting = csv.QUOTE_ALL
                    )
        return [url, domain, state, res]


    def scrapy_all_url(self):

        def scrapy_all_url_sub(cve_list: list):
            for cve in tqdm.tqdm(cve_list):
                if os.path.exists(f'{self.scrapy_result}/{cve}.csv'):
                    continue
                url_list = self.cve_data_all[cve]['reference_list']
                df = pd.DataFrame({
                    'url': [],
                    'domain': [],
                    'state': [],
                    'text': []
                })
                # for url in tqdm.tqdm(url_list):
                for url in url_list:
                    df.loc[len(df)] = self.scrapy_single_url(cve, url)
                df.to_csv(
                    f'{self.scrapy_result}/{cve}.csv',
                    index = False, 
                    quotechar = '"',
                    quoting = csv.QUOTE_ALL
                )
        
        # scrapy_all_url_sub(list(random.sample(self.cve_list, 5)))
        # scrapy_all_url_sub(['CVE-2004-0104'])
        cve_list_done = {
            file.split('.')[0] for file in os.listdir(self.scrapy_result_dir)
            if file not in ['.DS_Store']
        }
        cve_list_todo = list(set(self.cve_list) - cve_list_done)
        multi_thread(cve_list_todo, scrapy_all_url_sub, chunk_size = 1000)


    def re_scrapy(self, file_path = None, domain_list = None):
        
        if file_path:
            re_scrapy_by_file(file_path)
        elif domain_list:
            re_scrapy_by_domain(domain_list)


        def re_scrapy_by_domain(domain_list: list):
            domain_cve = load_json(f'{self.domain_statistics}/domain_cve.json')
            cves = { cve
                for domain in domain_list
                for cve in domain_cve[domain]
            }
            for cve in tqdm.tqdm(cves):
                df_cve = pd.read_csv(f'{self.scrapy_result}/{cve}.csv')
                for url in self.cve_data_all[cve]['reference_list']:
                    domain = get_domain(url)
                    if domain not in domain_list:
                        continue

                    res = self.scrapy_single_url(cve, url)
                    df_cve.loc[df_cve['url'] == url] = res
                df_cve.to_csv(
                    f'{self.scrapy_result}/{cve}.csv',
                    index = False, 
                    quotechar = '"',
                    quoting = csv.QUOTE_ALL
                )


        def re_scrapy_by_file(data_path):

            def re_scrapy_by_file_sub(data_list: list):
                for row in tqdm.tqdm(data_list):
                    cve = row[0]
                    url = row[1]
                    # if domain not in ['security-center.intel.com']: continue
                    df_cve = pd.read_csv(f'{self.scrapy_result}/{cve}.csv')
                    res = self.scrapy_single_url(cve, url, save_to_error_list = (data_path != self.error_list))
                    if res[2] == 0:
                        df_cve.loc[df_cve['url'] == url] = res
                        df_cve.to_csv(
                            f'{self.scrapy_result}/{cve}.csv',
                            index = False, 
                            quotechar = '"',
                            quoting = csv.QUOTE_ALL
                        )
                        index = (df['cve'] == cve) & (df['url'] == url)
                        df.loc[index, 'text'] = 'done'
                        print(f'{cve}, {url} update success, len: {len(res[3])}')
                    else:
                        print(f'{cve}, {url} updated failure')

            if not os.path.exists(data_path):
                print('error, file not exist')
                return

            df = pd.read_csv(data_path)
            print(f'before rescrapy: {len(df)} records')
            multi_thread(df.values.tolist(), re_scrapy_by_file_sub, chunk_size = 200)
            
            df = df.drop(df[df['text'] == 'done'].index)
            print(f'after rescrapy: {len(df)} records')
        
            df.to_csv(
                data_path,
                index = False, 
                quotechar = '"',
                quoting = csv.QUOTE_ALL
            )


    def count_scrapy_result(self):
        df_long_text = pd.DataFrame({
            'cve': [],
            'url': [],
            'domain': [],
            'len': [],
            'text': []
        })
        df_short_text = pd.DataFrame({
            'cve': [],
            'url': [],
            'domain': [],
            'len': [],
            'text': []
        })
        token_len_list = []
        
        for cve in tqdm.tqdm(self.cve_list):
            # print(cve)
            df = pd.read_csv(f'{self.scrapy_result}/{cve}.csv')
            for _, row in df.iterrows():
                # print(row.url)
                if isinstance(row.text, str):
                    length = len(row.text)
                    if 0 < length < 150:
                        df_short_text.loc[len(df_short_text)] = [cve, row.url, row.domain, length, row.text]
                    else:
                        token_len_list.append(calc_token(row.text))
                        if length > 50000:
                            df_long_text.loc[len(df_long_text)] = [cve, row.url, row.domain, length, row.text]

        df_long_text.to_csv(
            self.long_text,
            index = False, 
            quotechar = '"',
            quoting = csv.QUOTE_ALL
        )
        df_short_text.to_csv(
            self.short_text,
            index = False, 
            quotechar = '"',
            quoting = csv.QUOTE_ALL
        )

        print(f'long_text size:{len(df_long_text)}, short_text size: {len(df_short_text)}')
        print(f'total token: {sum(token_len_list)}')
        print(count_range(token_len_list, [150, 300, 500, 1000, 1800, 5000, 10000, 20000]))
