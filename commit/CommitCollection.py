import tqdm
import random
from util import *
from common.github_util import *


class CommitCollection:

    def __init__(self, root_path: str, cpe_json_path: str, repo_collection: dict):
        self.root_path = root_path
        self.cpe_json_path = cpe_json_path
        self.repo_collection = repo_collection

        self.repo_all_branch = self.get_repo_all_branch(f'{self.root_path}/repo_all_branch')
        self.cve_publiced_date = self.get_cve_publiced_date(f'{self.root_path}/cve_publiced_date')


    def start(self):
        self.get_commit()
        

    def get_commit(self):

        def get_commit_sub(cve_list_sub: list, token: str):
            for cve in tqdm.tqdm(cve_list_sub):
                res[cve] = []
                for repo in self.repo_collection[cve]:
                    branch_list = ['', 'master'] + self.repo_all_branch[repo]
                    flag = False
                    for branch in branch_list:
                        commit_sha = get_latest_commit_before_date(repo, self.cve_publiced_date[cve], token, branch)
                        if commit_sha:
                            res[cve].append((repo, commit_sha))
                            flag = True
                            break
                    if not flag:
                        not_found_tuple.append((cve, repo))
                if not res[cve]:
                    # 注意有一些cve没搜集到repo，不会进入上面的循环，在这里删除了
                    del res[cve]
                    # print('del', cve)

        res = {}
        not_found_tuple = []
        # multi_thread(random.sample(list(self.repo_collection.keys()), 1), get_commit_sub, tokens = github_tokens)
        multi_thread(list(self.repo_collection.keys()), get_commit_sub, tokens = github_tokens)
        
        print(len(res))     # 4480, 删了70个cve，包括没有repo和repo没找到commit的cve
        save_text(f'{self.root_path}/cve_repo_commit', res)
        save_pickle(f'{self.root_path}/cve_repo_commit.pkl', res)

        save_text(f'{self.root_path}/not_found_tuple', not_found_tuple)
        save_pickle(f'{self.root_path}/not_found_tuple.pkl', not_found_tuple)

    
    def get_cve_publiced_date(self, target: str):
        if os.path.exists(target):
            return load_pickle(f'{target}.pkl')
        
        print('start get_cve_publiced_date')
        res = {}
        files = os.listdir(self.cpe_json_path)
        for file in tqdm.tqdm(files):
            if file in ['.DS_Store']:
                continue
            
            fileName = f'{self.cpe_json_path}/{file}'
            with open(fileName, 'r', encoding='utf-8', errors='ignore') as f:
                data = json.load(f)['CVE_Items']
            for cve_dic in data:
                cve_id = cve_dic['cve']['CVE_data_meta']['ID']
                if cve_id not in self.repo_collection: continue
                time = cve_dic.get('publishedDate')
                res[cve_id] = time

        save_text(target, res)
        save_pickle(f'{target}.pkl', res)

        print('end get_cve_publiced_date\n')
        return res


    def get_repo_all_branch(self, target: str):
        if os.path.exists(target):
            return load_pickle(f'{target}.pkl')

        def get_repo_all_branch_sub(repo_list_sub: list, token: str):
            for repo in tqdm.tqdm(repo_list_sub):
                all_branch = get_all_branch(repo, token)
                res[repo] = all_branch

        print('start search repo\'s all branch')
        repo_all = set()
        for _, v in self.repo_collection.items():
            repo_all |= v
        # print(len(repo_all))

        res = {}
        multi_thread(list(repo_all), get_repo_all_branch_sub, tokens = github_tokens)

        save_text(target, res)
        save_pickle(f'{target}.pkl', res)

        print('end search repo\'s all branch\n')
        return res


if __name__ == '__main__':
    commitCollection = CommitCollection(
        '/Volumes/NVD/experiment_data/datasets/commit',
        '/Volumes/NVD/experiment_data/all/cpe_json',
        load_pickle('/Volumes/NVD/experiment_data/datasets/repository/repo_collection.pkl')
    )