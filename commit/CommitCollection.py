import tqdm
import random
from util import *
from common.github_util import *


class CommitCollection:

    def __init__(self, project_root_path: str, module_root_path: str, cve_data_all: dict):
        self.project_root_path = project_root_path
        self.module_root_path = module_root_path
        self.cve_data_all = cve_data_all

        self.repo_all_branch = self.get_repo_all_branch('repo_all_branch')


    def start(self):
        self.get_commit()
        

    def get_commit(self):

        def get_commit_sub(cve_list_sub: list, token: str):
            for cve in tqdm.tqdm(cve_list_sub):
                if 'collected_repo' not in self.cve_data_all[cve]: continue

                res[cve] = []
                for repo in self.cve_data_all[cve]['collected_repo']:
                    flag = False
                    for branch in self.repo_all_branch[repo]:
                        commit_sha = get_latest_commit_before_date(repo, self.cve_data_all[cve]['published_date'], token, branch)
                        if commit_sha:
                            res[cve].append((repo, commit_sha))
                            flag = True
                            break
                    if not flag:
                        not_found_tuple.append((cve, repo))
                if not res[cve]:
                    # 注意有一些cve没搜集到repo，不会进入上面的循环，在这里删除了
                    del res[cve]
                    # print('del', cve)

        res = {}
        not_found_tuple = []
        # multi_thread(random.sample(list(self.repo_collection.keys()), 1), get_commit_sub, tokens = github_tokens)
        multi_thread(list(self.cve_data_all.keys()), get_commit_sub, tokens = github_tokens)
        
        print(len(res))     # 4480, 删了70个cve，包括没有repo和repo没找到commit的cve
        save_text(f'{self.module_root_path}/cve_repo_commit', res)
        save_pickle(f'{self.module_root_path}/cve_repo_commit.pkl', res)

        save_text(f'{self.module_root_path}/not_found_tuple', not_found_tuple)
        save_pickle(f'{self.module_root_path}/not_found_tuple.pkl', not_found_tuple)

        for cve, v in res.items():
            self.cve_data_all[cve]['collected_commit'] = v
        save_json(f'{self.project_root_path}/cve_data_all.json', self.cve_data_all)
        save_pickle(f'{self.project_root_path}/cve_data_all.pkl', self.cve_data_all)


    def get_repo_all_branch(self, target: str):
        if os.path.exists(f'{self.module_root_path}/{target}.pkl'):
            return load_pickle(f'{self.module_root_path}/{target}.pkl')

        def get_repo_all_branch_sub(repo_list_sub: list, token: str):
            for repo in tqdm.tqdm(repo_list_sub):
                all_branch = get_all_branch(repo, token)
                res[repo] = all_branch

        print('start search repo\'s all branch')
        repo_all = set()
        for _, v in self.cve_data_all.items():
            if 'collected_repo' in v:
                repo_all |= set(v['collected_repo'])
        # print(len(repo_all))

        res = {}
        multi_thread(list(repo_all), get_repo_all_branch_sub, tokens = github_tokens)
        new_res = {}

        priority_branch_list = ['master', 'main', 'develop', 'dev', 'gh-pages']
        for repo, branchs in res.items():
            tp = ['']
            for branch in branchs:
                if branch in priority_branch_list:
                    tp.append(branch)
            for branch in branchs:
                if branch not in tp:
                    tp.append(branch)
            new_res[repo] = tp

        save_text(f'{self.module_root_path}/{target}', new_res)
        save_pickle(f'{self.module_root_path}/{target}.pkl', new_res)

        print('end search repo\'s all branch\n')
        return res


if __name__ == '__main__':
    commitCollection = CommitCollection(
        '/Volumes/NVD/experiment_data/datasets/commit',
        '/Volumes/NVD/experiment_data/all/cpe_json',
        load_pickle('/Volumes/NVD/experiment_data/datasets/repository_collection/repo_collection.pkl')
    )