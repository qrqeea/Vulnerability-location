import os
import tqdm
import time
import datetime
from github import Github
from util import save_pickle, save_text, load_pickle

root_dir = '/Volumes/NVD/experiment_data/267/procedure_data'


def get_commit(cve_and_repo_full_name: dict, publiced_date: dict, target_path: str):
    if os.path.exists(target_path):
        return load_pickle(f'{target_path}.pkl')

    g = Github('todo')
    store = {}

    for cve, repo_full_name in tqdm.tqdm(cve_and_repo_full_name):
        date_data = publiced_date.get(cve)
        if not date_data:
            print('not found nvd')
            continue

        # print(date_data)
        # store[(cve, repo_full_name)] = []
        # print('current cve: ', cve, 'repo: ', repo_full_name)
        try:
            rate_limit = g.get_rate_limit()
            remaining = rate_limit.raw_data['core']['remaining']
            reset = rate_limit.raw_data['core']['reset']
            if remaining <= 5:
                timestamp = time.time()
                wait_second = int(reset - timestamp)
                if wait_second > 0:
                    print('wait ', wait_second)
                    time.sleep(wait_second + 2)
        except:
            print('abnormal no limit')
            time.sleep(60)

        try:
            repo = g.get_repo(repo_full_name)
        except Exception as e:
            print(e)
            if hasattr(e, 'status') and e.status == 403:
                time.sleep(2)
            continue

        try:
            rate_limit = g.get_rate_limit()
            remaining = rate_limit.raw_data['core']['remaining']
            reset = rate_limit.raw_data['core']['reset']
            if remaining <= 5:
                timestamp = time.time()
                wait_second = int(reset - timestamp)
                if wait_second > 0:
                    print('wait ', wait_second)
                    time.sleep(wait_second + 2)
                    # util.save_pickle('experiment_data/267/repositorys/repository_commit.pkl', store)
        except:
            print('abnormal no limit')
            time.sleep(60)

        try:
            duration = 5
            total = 0
            while total < 90:
                total += duration
                start_date = date_data - datetime.timedelta(days = total)
                until_date = start_date + datetime.timedelta(days = duration)
                # print(start_date, until_date)
                commit_list = list(repo.get_commits(since = start_date, until = until_date))                
                if len(commit_list) > 0:
                    store[(cve, repo_full_name)] = (commit_list[0].sha, commit_list[0].last_modified)
                    break
            
            if not store.get((cve, repo_full_name)):    # 获取最新提交
                duration = 1
                date_now = datetime.datetime.now()
                while True:
                    duration *= 2
                    start_date = date_now - datetime.timedelta(days = duration)
                    # print(start_date, date_now)
                    commit_list = list(repo.get_commits(since = start_date, until = date_now))                
                    if len(commit_list) > 0:
                        store[(cve, repo_full_name)] = (commit_list[0].sha, commit_list[0].last_modified)
                        break
                    if duration > 5000:     # 超过10年应该没有提交了
                        break
        except Exception as e:
            print(e)
            if hasattr(e, 'status') and e.status == 403:
                time.sleep(2)

    save_text(target_path, store)
    save_pickle(f'{target_path}.pkl', store)

    return store

if __name__ == '__main__':
    path = root_dir + '/{(cve, repo_full_name): url}.pkl'
    data = load_pickle(path)
    print(len(data))
    # import random
    # random_elements = dict(random.sample(data.items(), 5))
    # print(random_elements)
    get_commit(
        data,
        load_pickle(root_dir + '/cve-published_date.pkl'),
        root_dir + '/{(cve, repo_full_name): commit}'
    )