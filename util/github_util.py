import pytz
import time
import json
import base64
import requests
from datetime import datetime

github_tokens = [
    
]


def check_api_limit(headers):
    remaining = headers['X-RateLimit-Remaining']
    reset_time = int(headers['X-RateLimit-Reset'])
    if int(remaining) == 0:
        reset_time_utc = datetime.utcfromtimestamp(reset_time)
        beijing_timezone = pytz.timezone('Asia/Shanghai')
        reset_time_beijing = reset_time_utc.replace(tzinfo=pytz.utc).astimezone(beijing_timezone)
        now_beijing = datetime.now(beijing_timezone)
        time_to_reset = (reset_time_beijing - now_beijing).total_seconds() + 2
        # print(f'剩余重置时间：{time_to_reset} seconds')
        if time_to_reset < 0:
            time_to_reset = 1
        time.sleep(time_to_reset)


def get_original_repo_name(repo_full_name: str, token: str):
    url = f"https://api.github.com/repos/{repo_full_name}"
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        repo = response.json()
        if 'parent' in repo.keys() and 'full_name' in repo['parent']:
            res = repo['parent']['full_name']
        else:
            res = repo_full_name
        return res
    else:
        # print(f"Failed to retrieve information for {repo_full_name}")
        return repo_full_name


def get_latest_repo_name(old_full_name, token: str):
    url = f'https://api.github.com/repos/{old_full_name}'
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        repo = response.json()
        res = repo['full_name'] if 'full_name' in repo.keys() else old_full_name
        return res
    else:
        # print(f"Failed to retrieve information for {old_full_name}")
        return old_full_name
    

def search_repo(params: dict, token: str):
    url = f'https://api.github.com/search/repositories'
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers, params = params)
    check_api_limit(response.headers)
    if response.ok:
        data = response.json()
        repositories = data['items']
        return {repo['full_name'] for repo in repositories}
    else:
        return {}
    

def check_repo_exist(repo_full_name: str, token: str):
    url = f"https://api.github.com/repos/{repo_full_name}"
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        return True
    else:
        return False


def get_latest_commit_before_date(repo_full_name: str, date: str, token: str, branch = None):
    url = f'https://api.github.com/repos/{repo_full_name}/commits'
    if branch:
        url += f'?sha={branch}'
    headers = {'Authorization': f'token {token}'}
    params = {
        'per_page': 1,
        'until': date,
    }
    response = requests.get(url, params = params, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        commits = response.json()
        if commits:
            try:
                return (commits[0]['sha'], commits[0]['commit']['committer']['date'])
            except Exception as e:
                print('Error', e)
        else:
            return None
    else:
        # empty repository
        # print(response.text)
        return None


def get_all_branch(repo_full_name: str, token: str):
    url = f'https://api.github.com/repos/{repo_full_name}/branches'
    headers = {'Authorization': f'token {token}'}
    page = 1
    branches = []
    while True:
        params={'page': page, 'per_page': 100}
        response = requests.get(url, headers = headers, params = params)
        check_api_limit(response.headers)
        if response.ok:
            try:
                data = response.json()
                if len(data) == 0:
                    break
                branches += [branch['name'] for branch in data]
            except Exception as e:
                print('Error1', e)
                continue
        page += 1
    return branches
    

def get_file_list(repo_full_name: str, commit_sha: str, token: str):
    url = f'https://api.github.com/repos/{repo_full_name}/git/trees/{commit_sha}?recursive=1'
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        try:
            # with open('tp', 'w') as f:
            #     print(json.dumps(response.json()), file=f)
            return [(item['path'], item['type'] == 'tree') for item in response.json()['tree']]
        except Exception as e:
            print('Error1', e)
            return []
    else:
        # print('Error2', response.text)
        return []


def get_file_content(repo_full_name: str, sha: str, file_path: str, token: str):
    url = f'https://api.github.com/repos/{repo_full_name}/contents/{file_path}?ref={sha}'
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        content = response.json().get('content', None)
        if content:
            try:
                content = base64.b64decode(content).decode('utf-8')
                return content
            except Exception as e:
                # print(repo_full_name, sha, file_path)
                pass
    return None


if __name__ == '__main__':
    # repo_name = 'projectatomic/libpod'
    # repo_name = 'containers/podman'
    # repo_name = 'saitoha/libsixel'
    # repo_name = 'libsixel/libsixel'
    # repo_name = 'CESNET/libyang'
    repo_name = 'qrqeea/test'

    # data = get_all_branch(
    #     repo_name,
    #     github_tokens[0],
    #     '2019-12-06T16:15Z',
    # )
    data = get_latest_commit_before_date(
        repo_name,
        '2024-05-06T16:15Z',
        github_tokens[0]
    )
    print(data)
    # print(type(data))
    # print(json.dumps(data))