import os
import tqdm
import random
from util import *


class ComponentExtraction:

    def __init__(self, root_path: str, cve_json_path: str, completion_result_dir: str, cve_list: list):
        self.root_path = root_path
        self.cve_json_path = cve_json_path
        self.completion_result_dir = completion_result_dir
        self.cve_list = cve_list

        os.makedirs(self.root_path, exist_ok = True)

        self.extract_prompt_dir = f'{self.root_path}/extract_prompt'
        os.makedirs(self.extract_prompt_dir, exist_ok = True)
        
        self.extract_result_dir = f'{self.root_path}/extract_result'
        os.makedirs(self.extract_result_dir, exist_ok = True)


    def start(self):
        self.complete_description = {}
        for cve in self.cve_list:
            path = f'{self.completion_result_dir}/{cve}'
            if os.path.exists(path):
                self.complete_description[cve] = load_file(path)
            else:
                self.complete_description[cve] = self.get_original_description(cve)
        # print(len(original_description))
        # print(len(complete_description))
        # save_pickle('test_module/origin', original_description)
        # save_pickle('test_module/completion', complete_description)
        self.extract()


    def extract(self):
        prompt_template = load_file(f'{self.root_path}/prompt_extract_components')
        for cve in tqdm.tqdm(self.cve_list):
        # for cve in tqdm.tqdm(random.sample(self.cve_list, 3)):
        # for cve in tqdm.tqdm(['CVE-2018-11796', 'CVE-2019-10768', 'CVE-2019-14849']):
            if os.path.exists(f'{self.extract_result_dir}/{cve}'):
                continue

            prompt = prompt_template.replace('{cve}', cve).replace('{description}', self.complete_description[cve])
            save_text(f'{self.extract_prompt_dir}/{cve}', prompt)
            try:
                res = query_openai(prompt)
                save_text(f'{self.extract_result_dir}/{cve}', res)
            except Exception as e:
                save_text(f'{self.extract_result_dir}/error_list', f'{cve}\n\n{e}', 'a')
        

    def get_original_description(self, cve: str):
        filePath = f'{self.cve_json_path}/{cve}.json'
        description = load_json(filePath)['containers']['cna']['descriptions'][0]['value']
        return description