import os
import ast
import tqdm
import random
from util.io_util import *


class ComponentExtraction:

    def __init__(self, project_root_path: str, module_root_path: str, completion_result_dir: str, cve_data_all: dict):
        self.project_root_path = project_root_path
        self.module_root_path = module_root_path
        self.completion_result_dir = completion_result_dir
        self.cve_data_all = cve_data_all
        
        self.cve_list = list(cve_data_all.keys())
        self.component_type_list = ['File', 'Module', 'Function']

        os.makedirs(self.module_root_path, exist_ok = True)

        self.extract_prompt_dir = f'{self.module_root_path}/extract_prompt'
        os.makedirs(self.extract_prompt_dir, exist_ok = True)
        
        self.extract_result_dir = f'{self.module_root_path}/extract_result'
        os.makedirs(self.extract_result_dir, exist_ok = True)


    def start(self):
        self.extract()
        self.handle_result()
        self.count_result()


    def get_description(self, cve: str):
        path = f'{self.completion_result_dir}/{cve}'
        if os.path.exists(path):
            return load_file(path)
        else:
            return self.cve_data_all[cve]['original_description']


    def extract(self):

        def extract_sub(cve_list_sub: list):
            for cve in tqdm.tqdm(cve_list_sub):
            # for cve in tqdm.tqdm(random.sample(self.cve_list, 3)):
            # for cve in tqdm.tqdm(['CVE-2020-10059', 'CVE-2017-1000431']):
                if os.path.exists(f'{self.extract_result_dir}/{cve}'):
                    continue

                prompt = prompt_template.replace('{description}', self.get_description(cve))
                save_text(f'{self.extract_prompt_dir}/{cve}', prompt)
                try:
                    res = query_openai(prompt)
                    save_text(f'{self.extract_result_dir}/{cve}', res)
                except Exception as e:
                    save_text(f'{self.extract_result_dir}/error_list', f'{cve}\n\n{e}', 'a')
        
        prompt_template = load_file(f'{self.module_root_path}/prompt_extract_components')
        multi_thread(self.cve_list, extract_sub, chunk_size = 1200)


    def handle_result(self):
        if any('components' in value for value in self.cve_data_all.values()):
            return

        for cve in self.cve_list:
        # for cve in ['CVE-2017-9378', 'CVE-2019-16985']:
            components = {}
            path = f'{self.extract_result_dir}/{cve}'
            try:
                components = load_json(path)
                for key in ['Module', 'File', 'Function']:
                    if not components[key]:
                        del components[key]
                if components:
                    self.cve_data_all[cve]['components'] = components
            except Exception as e:
                print(path, e)

        save_json(f'{self.project_root_path}/cve_data_all.json', self.cve_data_all)
        save_pickle(f'{self.project_root_path}/cve_data_all.pkl', self.cve_data_all)


    def count_result(self):
        empty_count = 0
        module_count = 0
        file_count = 0
        function_count = 0
        for _, value in self.cve_data_all.items():
            components = value.get('components')
            if not components:
                empty_count += 1
                continue
            if 'Module' in components:
                module_count += 1
            if 'File' in components:
                file_count += 1
            if 'Function' in components:
                function_count += 1

        print('empty count:', empty_count)
        print('Module count:', module_count)
        print('File count:', file_count)
        print('Function count:', function_count)