import os
import ast
import tqdm
import random
from util import *


class ComponentExtraction:

    def __init__(self, root_path: str, cve_json_path: str, completion_result_dir: str, cve_list: list):
        self.root_path = root_path
        self.cve_json_path = cve_json_path
        self.completion_result_dir = completion_result_dir
        self.cve_list = cve_list
        self.component_type_list = ['File', 'Module', 'Function']

        os.makedirs(self.root_path, exist_ok = True)

        self.extract_prompt_dir = f'{self.root_path}/extract_prompt'
        os.makedirs(self.extract_prompt_dir, exist_ok = True)
        
        self.extract_result_dir = f'{self.root_path}/extract_result'
        os.makedirs(self.extract_result_dir, exist_ok = True)


    def start(self):
        self.complete_description = {}
        for cve in self.cve_list:
            path = f'{self.completion_result_dir}/{cve}'
            if os.path.exists(path):
                self.complete_description[cve] = load_file(path)
            else:
                self.complete_description[cve] = self.get_original_description(cve)
        # print(len(original_description))
        # print(len(complete_description))
        # save_pickle('test_module/origin', original_description)
        # save_pickle('test_module/completion', complete_description)
        
        # self.extract()
        # self.handle_result()
        self.count_result()


    def extract(self):

        def extract_sub(cve_list_sub: list):
            for cve in tqdm.tqdm(cve_list_sub):
            # for cve in tqdm.tqdm(random.sample(self.cve_list, 3)):
            # for cve in tqdm.tqdm(['CVE-2018-11796', 'CVE-2019-10768', 'CVE-2019-14849']):
                if os.path.exists(f'{self.extract_result_dir}/{cve}'):
                    continue

                prompt = prompt_template.replace('{cve}', cve).replace('{description}', self.complete_description[cve])
                save_text(f'{self.extract_prompt_dir}/{cve}', prompt)
                try:
                    res = query_openai(prompt)
                    save_text(f'{self.extract_result_dir}/{cve}', res)
                except Exception as e:
                    save_text(f'{self.extract_result_dir}/error_list', f'{cve}\n\n{e}', 'a')
        
        prompt_template = load_file(f'{self.root_path}/prompt_extract_components')
        multi_thread(self.cve_list, extract_sub, chunk_size = 1500)


    def handle_result(self):
        res = {}
        for cve in self.cve_list:
        # for cve in ['CVE-2017-9378', 'CVE-2019-16985']:
            res[cve] = {}
            path = f'{self.extract_result_dir}/{cve}'
            with open(path, 'r', encoding = 'utf-8') as f:
                data = f.readlines()
            data = [line.strip() for line in data if any(item in line for item in self.component_type_list)]
            if len(data) != 3:
                print('error1', cve)
            try:
                for index, item in enumerate(data):
                    l = item.find('[')
                    r = item.rfind(']')
                    # print(l, r)
                    tp = item[l:r + 1]
                    if '\\' in tp:
                        tp = tp.replace('\\', '/')
                    component_list = ast.literal_eval(tp)
                    # print(component_list)
                    if component_list:
                        res[cve][self.component_type_list[index]] = component_list
            except Exception as e:
                print('error2', cve, e)
        
        save_text(f'{self.root_path}/components', res)
        save_pickle(f'{self.root_path}/components.pkl', res)


    def count_result(self):
        data = load_pickle(f'{self.root_path}/components.pkl')
        empty_count = 0
        module_count = 0
        file_count = 0
        function_count = 0
        for cve, component in data.items():
            if not component:
                empty_count += 1
            if 'Module' in component:
                module_count += 1
            if 'File' in component:
                file_count += 1
            if 'Function' in component:
                function_count += 1

        print('empty count:', empty_count)
        print('Module count:', module_count)
        print('File count:', file_count)
        print('Function count:', function_count)
            

    def get_original_description(self, cve: str):
        filePath = f'{self.cve_json_path}/{cve}.json'
        description = load_json(filePath)['containers']['cna']['descriptions'][0]['value']
        return description