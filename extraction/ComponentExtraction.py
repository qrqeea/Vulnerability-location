import os
import ast
import sys
import tqdm
import random
from util.io_util import *


class ComponentExtraction:

    def __init__(self, project_root_path: str, module_root_path: str, completion_result_dir: str, cve_data_all: dict):
        self.project_root_path = project_root_path
        self.module_root_path = module_root_path
        self.completion_result_dir = completion_result_dir
        self.cve_data_all = cve_data_all
        
        self.cve_list = list(cve_data_all.keys())
        self.component_type_list = ['File', 'Module', 'Function']

        os.makedirs(self.module_root_path, exist_ok = True)

        self.extract_prompt_dir = f'{self.module_root_path}/extract_prompt'
        os.makedirs(self.extract_prompt_dir, exist_ok = True)
        
        self.extract_result_dir = f'{self.module_root_path}/extract_result'
        os.makedirs(self.extract_result_dir, exist_ok = True)


    def start(self):
        self.sync()
        # self.extract()
        self.handle_result()
        self.count_result()


    def sync(self):
        dir_list = [
            (f'{self.extract_prompt_dir}', f'{self.module_root_path}/deprecated/extract_prompt'),
            (f'{self.extract_result_dir}', f'{self.module_root_path}/deprecated/extract_result'),
        ]
        for source, dest in dir_list:
            file_list = os.listdir(source)
            if '.DS_Store' in file_list:
                file_list.remove('.DS_Store')
            for file in file_list:
                cve = file.split('.')[0]
                if cve not in self.cve_list:
                    copy_file(f'{source}/{file}', f'{dest}/{file}')
                    os.remove(f'{source}/{file}')


    def get_description(self, cve: str):
        if 'complete_description' in self.cve_data_all[cve]:
            return self.cve_data_all[cve]['complete_description']
        else:
            return self.cve_data_all[cve]['original_description']


    def extract(self):

        def extract_sub(cve_list_sub: list):
            for cve in tqdm.tqdm(cve_list_sub):
            # for cve in tqdm.tqdm(random.sample(cve_list_sub, 2)):
            # for cve in tqdm.tqdm(['CVE-2020-10059', 'CVE-2017-1000431']):
                if os.path.exists(f'{self.extract_result_dir}/{cve}'):
                    continue

                prompt = prompt_template.replace('{description}', self.get_description(cve))
                save_text(f'{self.extract_prompt_dir}/{cve}', prompt)
                try:
                    res = query_openai(prompt)
                    res = self.clean_json(res)
                    save_text(f'{self.extract_result_dir}/{cve}', res)
                except Exception as e:
                    save_text(f'{self.extract_result_dir}/error_list', f'{cve}\n\n{e}', 'a')
        
        rest_cve = list(set(self.cve_list) -
            {file.split('.')[0] for file in os.listdir(self.extract_result_dir) if file not in ['.DS_Store', 'error_list']}
        )
        print(len(rest_cve))
        prompt_template = load_file(f'{self.module_root_path}/prompt_extract_components')
        multi_thread(rest_cve, extract_sub, chunk_size = 300)


    def clean_json(self, s: str):
        if '```json' in s:
            s = s.replace('```json', '')
        if '```' in s:
            s = s.replace('```', '')
        if '\\\\' in s:
            s = s.replace('\\\\', '/')
        if '\\' in s:
            s = s.replace('\\', '/')
        return s


    def tp(self):
        # 补全的5930个描述使用原描述再提取一次
        cve_list = [
            cve
            for cve in os.listdir(f'{self.module_root_path}/extract_result_5930')
            if cve not in ['.DS_Store', 'error_list']
        ]
        # print(len(cve_list))
        for cve in tqdm.tqdm(cve_list):
            path = f'{self.extract_result_dir}/{cve}'
            components = load_json(path)
            components2 = load_json(f'{self.module_root_path}/extract_result_5930/{cve}')
            combine = {}
            for key in ['File', 'Function', 'Module']:
                combine[key] = list(set(components[key]) | set(components2[key]))
            save_json(path, combine)


    def handle_result(self):
        if any('components' in v for v in self.cve_data_all.values()):
            return

        for cve in tqdm.tqdm(self.cve_list):
            path = f'{self.extract_result_dir}/{cve}'
            components = load_json(path)
            for key in ['Module', 'File', 'Function']:
                if not components[key]:
                    del components[key]
            if components:
                self.cve_data_all[cve]['components'] = components
            elif 'components' in self.cve_data_all[cve]:
                del self.cve_data_all[cve]['components']

        save_json(f'{self.project_root_path}/cve_data_all.json', self.cve_data_all)
        save_pickle(f'{self.project_root_path}/cve_data_all.pkl', self.cve_data_all)


    def count_result(self):
        empty_count = 0
        module_count = 0
        file_count = 0
        function_count = 0
        for _, value in self.cve_data_all.items():
            components = value.get('components')
            if not components:
                empty_count += 1
                continue
            if 'Module' in components:
                module_count += 1
            if 'File' in components:
                file_count += 1
            if 'Function' in components:
                function_count += 1

        print('empty count:', empty_count)
        print('Module count:', module_count)
        print('File count:', file_count)
        print('Function count:', function_count)