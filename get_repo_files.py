import os
import tqdm
from util import load_pickle, save_text


def get_all_repo(cve_and_repo_full_name: dict):
    # cve_and_repo_full_name = load_pickle('experiment_data/267/{(cve, repo_full_name): url}.pkl')
    # print(len(data))

    repo_set = set()
    for (_, repo_full_name), url in cve_and_repo_full_name.items():
        # print(cve, repo_full_name, url)
        if repo_full_name in repo_set:
            continue
        repo_set.add((repo_full_name, url))

    # repo_set = {
    #     ('torvalds/linux', 'https://github.com/torvalds/linux'),
    #     ('netblue30/firejail', 'https://github.com/netblue30/firejail'),
    #     ('os-autoinst/os-autoinst-needles-opensuse', 'https://github.com/os-autoinst/os-autoinst-needles-opensuse'),
    #     ('linuxmint/mint-x-icons', 'https://github.com/linuxmint/mint-x-icons')
    # }

    # print(len(repo_set))
        
    path = 'experiment_data/267/repo_all' 
    for repo_full_name, url in tqdm.tqdm(repo_set):
        # print(repo_full_name, url)
        repo_full_name_updated = repo_full_name.replace('/', '—')
        # print(repo_full_name_updated)
        if os.path.exists(f'{path}/{repo_full_name_updated}'):
            continue
        # cmd = f'git clone --depth=1 {url}.git {path}/{repo_full_name_updated}'
        cmd = f'git clone --depth=1 git@github.com:{repo_full_name}.git {path}/{repo_full_name_updated}'
        if os.system(cmd) != 0:
            save_text(f'{path}/error_list', repo_full_name, 'a')
            # print('clone {repo_full_name} error')


def get_repo_files(cve_and_repo_full_name: dict, cve_and_commit: dict):
    
    get_all_repo(cve_and_repo_full_name)

    # cve_and_commit = load_pickle('experiment_data/267/{(cve, repo_full_name): commit}.pkl')
    # cve_and_commit = {
    #     ('CVE-2021-37706', 'pjsip/pjproject') :  ('69a89a26dd6981ba81ae93beaaece9cdbfd24290', 'Wed, 22 Dec 2021 02:32:22 GMT')
    # }
    # print(len(cve_and_commit))

    path = 'experiment_data/267/target'
    for (cve, repo_full_name), (sha, _) in tqdm.tqdm(cve_and_commit.items()):
        dir_name = f'{path}/{cve}'
        if not os.path.exists(dir_name):
            os.mkdir(dir_name)
            
        repo_full_name_updated = repo_full_name.replace('/', '—')
        if os.path.exists(f'{path}/{cve}/{repo_full_name_updated}'):
            continue

        source_path = f'/Users/wangtao/Documents/VSCode-Workspace/Python/NVD/experiment_data/267/repo_all/{repo_full_name_updated}'
        
        print('current cve: ', cve, 'repo_full_name: ', repo_full_name)

        cmd = f'cd {source_path} && git clean -fd && git checkout . && git checkout {sha} 1>/dev/null 2>/dev/null'
        if os.system(cmd) != 0:
            fetch_cmd = f'cd {source_path} && git fetch origin {sha} --depth=1 1>/dev/null 2>/dev/null'
            if os.system(fetch_cmd) != 0:
                checkout_cmd = f'cd {source_path} && git checkout {sha} 1>/dev/null 2>/dev/null'
                # print(f'-----{checkout_cmd}-----')
                if os.system(checkout_cmd) != 0:
                    save_text(f'{path}/error_list', (cve, repo_full_name), 'a')
                    continue
            else:
                save_text(f'{path}/error_list', (cve, repo_full_name), 'a')
                continue
        
        dest_path = f'/Users/wangtao/Documents/VSCode-Workspace/Python/NVD/{dir_name}'
        cmd = f"rsync -a --exclude='.git' {source_path} {dest_path}"
        # print(cmd)
        if os.system(cmd) != 0:
            save_text(f'{path}/error_list', (cve, repo_full_name), 'a')
        else: 
            # print('success')
            pass

if __name__ == '__main__':
    # get_all_repo({})
    get_repo_files({}, {})