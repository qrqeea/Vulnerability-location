import os
import json
import pickle
import shutil
from openai import OpenAI
from dotenv import load_dotenv
from urllib.parse import urlparse

load_dotenv()

def query_openai(prompt: str, model = 'gpt-3.5-turbo'):

    client = OpenAI(api_key = os.environ.get('OPENAI_API_KEY'))

    chat_completion = client.chat.completions.create(
        messages = [
            {
                'role': 'user',
                'content': prompt,
            }
        ],
        model = model,
        temperature = 0
    )
    # print(chat_completion.choices[0].message.content)
    return chat_completion.choices[0].message.content


def get_domain(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc


def copy_file(src_file, dest_file):
    shutil.copy(src_file, dest_file)

 
def load_pickle(file_path):
    with open(file_path, 'rb') as f:
        data = pickle.load(f)
        return data


def save_pickle(path, data):
    with open(path, 'wb') as f:
        pickle.dump(data, f)


def save_text(path, data, mode = 'w'):
    with open(path, mode) as f:
        if isinstance(data, dict):
            if isinstance(list(data.values())[0], (set, list)):
                for k, v in data.items():
                    print(k, file = f)
                    for item in v:
                        print(item, file = f)
            else:    
                for k, v in data.items():
                    print(k, ': ', v, file = f)
        elif isinstance(data, (set, list)):
            for i in data:
                print(i, file = f)
        else:
            print(data, file = f)


def load_json(path, mode = 'r', encoding = 'utf-8'):
    with open(path, mode, encoding = encoding) as f:
        return json.load(f)