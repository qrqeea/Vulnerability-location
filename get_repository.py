import os
import tqdm
import requests
from urllib.parse import urlparse
from util import query_openai, save_text, save_pickle, load_pickle


def search_github_repositories(keyword):
    base_url = "https://api.github.com/"
    search_endpoint = "search/repositories"
    params = {
        "q": keyword,
        "per_page": 5
    }
    
    response = requests.get(base_url + search_endpoint, params=params)
    if response.status_code == 200:
        data = response.json()
        repositories = data["items"]
        # for repo in repositories:
        #     print(repo["html_url"])
        return [repo["html_url"] for repo in repositories]
    else:
        print("Error occurred: Status code", response.status_code)
        return None


def extract_repo_name(repo_url):
    if repo_url.startswith("https://github.com/"):
        path_components: list = repo_url[len("https://github.com/"):].split('/')
        path_components = [item for item in path_components if item != '']  # 去除空元素
        # 如果路径包含用户名和仓库名，则认为是仓库地址
        if len(path_components) >= 2:
            return f"{path_components[0]}/{path_components[1]}"
    return None


def get_product_url(cpe_product_dic: dict):
    products = set()
    for _, value in cpe_product_dic.items():
        products |= value
    # print(len(products))
        
    prompt_general = 'Give me the GitHub URL of #, answer within 100 tokens. Only output the URL, do not output prompt information.'
    product_repo_url = {}    # {product: [(repo_full_name, repo_url)]}
    
    tmp_file = 'repository_tmp.pkl'
    if os.path.exists(tmp_file):
        product_repo_url = load_pickle(tmp_file)
        print(len(product_repo_url))

    for product in tqdm.tqdm(products):
        if product_repo_url.get(product):
            continue

        prompt = prompt_general.replace('#', product)
        # print(prompt)
        try:
            # print('querying openai')
            url = query_openai(prompt)
            repo_full_name = extract_repo_name(url)
            if repo_full_name and requests.get(url).ok:
                product_repo_url[product] = [(repo_full_name, url)]
            else:
                urls = search_github_repositories(product)
                if urls:
                    tp = []
                    for url in urls:
                        repo_full_name = extract_repo_name(url)
                        if repo_full_name and requests.get(url).ok:
                            tp.append((repo_full_name, url))
                    product_repo_url[product] = tp
        except Exception:
            try:
                # print('second querying openai')
                url = query_openai(prompt)
                repo_full_name = extract_repo_name(url)
                if repo_full_name and requests.get(url).ok:
                    product_repo_url[product] = [(repo_full_name, url)]
                else:
                    urls = search_github_repositories(product)
                    if urls:
                        tp = []
                        for url in urls:
                            repo_full_name = extract_repo_name(url)
                            if repo_full_name and requests.get(url).ok:
                                tp.append((repo_full_name, url))
                        product_repo_url[product] = tp
            except Exception as e:
                # print(e)
                save_pickle(tmp_file, product_repo_url)

    return product_repo_url


def get_repository(cpe_product_dic: dict, target_path: str):
    # input: {cve: {cpe_products}}
    # 汇总所有product，依次询问gpt，然后验证是否有效，若无效通过github搜索，保留5个，{product: [(repo_full_name, repo_url)]}
    # 汇总输出：遍历input，对每个product，到2中查找，若存在，则输出{(cve, repo_full_name): url}
    if os.path.exists(target_path):
        return load_pickle(f'{target_path}.pkl')
    
    product_repo_url = get_product_url(cpe_product_dic)
    # print(product_repo_url)
    res = {}
    for cve, products in cpe_product_dic.items():
        for product in products:
            if product_repo_url.get(product):
                for repo_full_name, url in product_repo_url[product]:
                    res[(cve, repo_full_name)] = url
    
    save_text(target_path, res)
    save_pickle(f'{target_path}.pkl', res)

    return res

if __name__ == '__main__':
    cpe_product_dic = {
        'CVE-2021-21996' :  {'salt'},
        'CVE-2021-22119' :  {'spring_security'},
        'CVE-2021-22696' :  {'cxf'},
        'CVE-2021-23450' :  {'dojo'},
        'CVE-2016-9459' :  {'owncloud', 'nextcloud_server'},
        'CVE-2016-9460' :  {'owncloud', 'nextcloud'}
    }
    get_repository(cpe_product_dic, 'experiment_data/267/{(cve, repo_full_name): url}')