import os
import re
import tqdm
import shutil
from util.io_util import load_pickle, save_pickle, copy_file, save_json, load_json

'''
从NVD官网下载的json数据中提取需要的部分, 然后与ground_truth_data合并成一个dict
- reference_list: 
    type: [str]
- original_description:
    type: str
- published_date:
    type: str
- cpe_product:
    type: [str]
- cpe_uri:
    type: [str]
- repos:
    type: [str]
- files:
    type: [str]
- repo_and_file:
    type: [(str, str)]
'''


def get_product_from_cpe(s: str):
    s = s.replace('\:', '')
    pattern = r'(?<=:)([^:]+):([^:]+):([^:]+):([^:]+):([^:]+):'
    match = re.search(pattern, s)
    if match:
        return match.group(4)
    else:
        return None


def filter_json_file(cve_list: list, cve_json_path: str, target_path: str):
    file_list = []
    for root, _, files in os.walk(cve_json_path):
        for file in files:
            if file not in ['.DS_Store', 'delta.json', 'deltaLog.json']:
                file_list.append(os.path.join(root, file))

    for file in file_list:
        cve_id = file.split('/')[-1].split('.')[0]
        if cve_id not in cve_list:
            continue

        try:
            # data = load_json(file)
            # if data['cveMetadata']['state'] == 'REJECTED':
            #     print('REJECTED', cve_id)
            #     continue
            # if 'references' not in data['containers']['cna'].keys():
            #     print('no reference', cve_id)
            #     continue
            # references = data['containers']['cna']['references']
            copy_file(file, f'{target_path}/{cve_id}.json')
        except Exception as e:
            # print(e)
            print(f'error: open {cve_id}.json failure')


def preprocessing_data(ground_truth: dict, project_root_path: str, cve_json_path: str, cpe_json_path: str):
    os.makedirs(project_root_path, exist_ok = True)

    cve_list = {item[0] for item in ground_truth.keys()}
    # print(len(cve_list))        # 8978

    if os.path.exists(f'{project_root_path}/cve_data_all.pkl'):
        return load_pickle(f'{project_root_path}/cve_data_all.pkl')
    
    temp_path = f'{project_root_path}/cve_json_8978'
    os.makedirs(temp_path, exist_ok = True)

    print('start traverse cve json file')
    filter_json_file(
        cve_list = cve_list,
        cve_json_path = cve_json_path,
        target_path = temp_path
    )
    print('end traverse cve json file')

    cve_data_all = {}
    for cve in cve_list:
        cve_data_all[cve] = {}
        filePath = f'{temp_path}/{cve}.json'
        data = load_json(filePath)
        cve_data_all[cve]['original_description'] = data['containers']['cna']['descriptions'][0]['value']
        cve_data_all[cve]['reference_list'] = [dic['url'] for dic in data['containers']['cna']['references']]

    print('start traverse cpe json file')
    for file in tqdm.tqdm(os.listdir(cpe_json_path)):
        if file in ['.DS_Store']: continue
        
        fileName = f'{cpe_json_path}/{file}'
        data = load_json(fileName)['CVE_Items']
        for cve_dic in data:
            cve = cve_dic['cve']['CVE_data_meta']['ID']
            if cve not in cve_list: continue

            cpe_uri_set = set()
            cpe_product_set = set()
            cpe_list = cve_dic['configurations']['nodes'][0]['cpe_match']
            if not cpe_list:
                cpe_list = cve_dic['configurations']['nodes'][0]['children'][0]['cpe_match']
            for cpe_dic in cpe_list:
                cpe_uri = cpe_dic['cpe23Uri']
                cpe_product_set.add(get_product_from_cpe(cpe_uri))
                cpe_uri_set.add(cpe_uri)
            cve_data_all[cve]['cpe_uri'] = list(cpe_uri_set)
            cve_data_all[cve]['cpe_product'] = list(cpe_product_set)

            time = cve_dic.get('publishedDate')
            cve_data_all[cve]['published_date'] = time

    print('end traverse cpe json file')

    for (cve, repo), file in ground_truth.items():        
        file = next(iter(file))
        if 'repos' in cve_data_all[cve]:
            if repo not in cve_data_all[cve]['repos']:
                cve_data_all[cve]['repos'].append(repo)
        else:
            cve_data_all[cve]['repos'] = [repo]
        if 'files' in cve_data_all[cve]:
            if file not in cve_data_all[cve]['files']:
                cve_data_all[cve]['files'].append(file)
        else:
            cve_data_all[cve]['files'] = [file]
        if 'repo_and_file' in cve_data_all[cve]:
            if (repo, file) not in cve_data_all[cve]['repo_and_file']:
                cve_data_all[cve]['repo_and_file'].append((repo, file))
        else:
            cve_data_all[cve]['repo_and_file'] = [(repo, file)]

    save_json(f'{project_root_path}/cve_data_all.json', cve_data_all)
    save_pickle(f'{project_root_path}/cve_data_all.pkl', cve_data_all)

    # shutil.rmtree(temp_path)
    
    return cve_data_all