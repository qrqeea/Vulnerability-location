import os
import json
import sys
import tqdm
import importlib
import pandas as pd
from util import query_openai, get_domain, copy_file, load_pickle, save_text, load_json, count_range, calc_token


config = {
    "particular_domain_list": [
        "lists.apache.org",
        "access.redhat.com",
        "lists.fedoraproject.org",
        "lists.debian.org",
        "www.debian.org",
        "lists.opensuse.org",
        "security.gentoo.org",
        "www.openwall.com",
        "bugzilla.redhat.com",
        "security.netapp.com",
        "huntr.dev",
        "seclists.org",
        "snyk.io",
        "packetstormsecurity.com",
        "www.redhat.com",
        "exchange.xforce.ibmcloud.com",
        "www.ubuntu.com",
        "jenkins.io",
        "marc.info",
        "www.exploit-db.com",
        "www.tenable.com"
    ],
    "not_handle_domain_list": [
        "ftp.caldera.com",
        "cert-portal.siemens.com"
    ]
}

modules = {}


# def complete_description_single(cve: str):
#     with open('prompt_template/prompt_complete_description', 'r') as f:
#         prompt_all = f.read()
#     prompt_all = prompt_all.replace('{#original description#}', get_original_description(cve)) 

#     data_dir = f'experiment_data/267/completion_description_data/{cve}'

#     prompt_list = generate_prompt_list(cve)
#     print(f"prompt_list_len: {len(prompt_list)}")
#     for index, prompt in enumerate(prompt_list):
#         if len(prompt) > 20000:     # 超出token上限先不处理
#             continue
#         print('querying openai...')
#         res = query_openai(prompt)
#         with open(f'{data_dir}/openai_res_{index}', 'w') as f:
#             print(res, file = f)
#         # 需要判断一下结果是不是'no result'或者内容长度太少
#         if len(res) > 180:
#             prompt_all += res + '\n\n'

#     with open(f'{data_dir}/prompt_all', 'w') as f:
#         print(prompt_all, file = f)
    
#     res = query_openai(prompt_all)
#     with open(f'{data_dir}/openai_res', 'w') as f:
#         print(res, file = f)
#     return res


# def gather_result():
#     dir = 'experiment_data/267/completion_description_data'
#     for cve in os.listdir(dir):
#         if 'CVE' not in cve:
#             continue
        # copy_file(f'{dir}/{cve}/openai_res', f'{dir}/descriptions/{cve}')


class Completion:
    
    def __init__(self, root_path: str, max_token: int):
        self.root_path = root_path
        self.max_token = max_token
        self.cve_list = load_pickle(f'{self.root_path}/cve_list.pkl')

        self.completion_dir = f'{self.root_path}/completion'
        if not os.path.exists(self.completion_dir):
            os.mkdir(self.completion_dir)

        self.url_list_dir = f'{self.root_path}/completion/url_list'
        if not os.path.exists(self.url_list_dir):
            os.mkdir(self.url_list_dir)

        self.scrapy_result_dir = f'{self.root_path}/completion/scrapy_result'
        if not os.path.exists(self.scrapy_result_dir):
            os.mkdir(self.scrapy_result_dir)

        self.embedding_result_dir = f'{self.root_path}/completion/embedding_result'
        if not os.path.exists(self.embedding_result_dir):
            os.mkdir(self.embedding_result_dir)

        self.completion_prompt_dir = f'{self.root_path}/completion/completion_prompt'
        if not os.path.exists(self.completion_prompt_dir):
            os.mkdir(self.completion_prompt_dir)

        self.completion_result_dir = f'{self.root_path}/completion/completion_result'
        if not os.path.exists(self.completion_result_dir):
            os.mkdir(self.completion_result_dir)


    def get_reference_url_list(self, cve: str):
        filePath = f'{self.root_path}/cve_json/{cve}.json'
        reference_list = [dic['url'] for dic in load_json(filePath)['containers']['cna']['references']]
        return reference_list


    def count_url(self, interval: list):
        reference_len_list = [
            len(self.get_reference_url_list(cve))
            for cve in self.cve_list
        ]
        res = count_range(reference_len_list, interval)
        print(res)


    def get_original_description(self, cve: str):
        filePath = f'{self.root_path}/cve_json/{cve}.json'
        description = load_json(filePath)['containers']['cna']['descriptions'][0]['value']
        return description


    def count_descriptions(self, interval: list):
        description_len_list = [
            len(self.get_original_description(cve).split(' '))
            for cve in self.cve_list
        ]
        res = count_range(description_len_list, interval)
        print(res)


    def count_domain(self):
        res = {}
        for cve in self.cve_list:
            url_list = self.get_reference_url_list(cve)
            for dic in url_list:
                url = dic['url']
                domain = get_domain(url)
                save_text(f'{self.url_list_dir}/{domain}', url, 'a')
                if domain in res.keys():
                    res[domain] += 1
                else:
                    res[domain] = 1
        # res = dict(sorted(res.items(), key = lambda item: item[1], reverse = True))
        # print(res)


    def get_module_name(self, domain: str):
        module_name = domain.replace('.', '_').replace('-', '_')
        if module_name == 'www_debian_org':     # 同一个网站
            module_name = 'lists_debian_org'
        return module_name


    def scrapy_single_url(self, url: str, retry = False):
        domain = get_domain(url)
        state = 0           # 0表示无异常
        try:
            if domain in config['particular_domain_list']:
                module_name = self.get_module_name(domain)
                if module_name not in modules.keys():
                    modules[module_name] = importlib.import_module(f'completion.prompt_generator.{module_name}')
                res = modules[module_name].generate_prompt(url)
            elif domain not in config['not_handle_domain_list']:
                # print(f'common url: {url}')
                from completion.prompt_generator import common
                res = common.generate_prompt(url)
        except Exception as e:
            if 'http' in e and not retry:     # 网络异常且是第一次尝试
                res = self.scrapy_single_url(url, True)
                return res
            else:
                res = e
                save_text(
                    f'{self.scrapy_result_dir}/error_list',
                    f'{url},{domain},{e}',
                    'a'
                )
        if res == None:
            state = 1
        return [url, domain, state, res]


    def scrapy_all_url(self):
        for cve in tqdm.tqdm(self.cve_list):
            url_list = self.get_reference_url_list(cve)
            # print(cve, url_list)
            df = pd.DataFrame({
                'url': [],
                'domain': [],
                'state': [],
                'text': []
            })
            for url in url_list:
                df.loc[len(df)] = self.scrapy_single_url(url)
            df.to_csv(f'{self.scrapy_result_dir}/{cve}_raw.csv', index = False)
            df = self.split_scrapy_res(df)
            df.to_csv(f'{self.scrapy_result_dir}/{cve}.csv', index = False)
        

    def split_scrapy_res(self, df: pd.DataFrame):
        res = pd.DataFrame({
            'url': [],
            'domain': [],
            'text': []
        })
        block_len = int(self.max_token / 7)
        for line in df:
            if line.state == 1:     # TODO 错误处理
                continue
            token_len = calc_token(line.text)
            text_len = len(line.text)
            if token_len > block_len:
                l = 0
                r = 0
                while l < text_len:
                    while r < text_len and calc_token(line.text[l:r]) < block_len:
                        r += 200
                    else:
                        if r > text_len:
                            r = text_len
                        if line.text[l:r]:
                            res.loc[len(res)] = [line.url, line.text[l:r]]
                        l = r
            else:
                res.loc[len(res)] = [line.url, line.text]
        return res


    def complete_all(self):
        self.scrapy_all_url()
        for cve in tqdm.tqdm(self.cve_list):
            # 已存在对应目录就认为已经完成补全
            if not os.path.exists(f'{self.completion_result_dir}/{cve}'):
                # print(f'current cve: {cve}')
                # self.complete_single(cve)
                pass