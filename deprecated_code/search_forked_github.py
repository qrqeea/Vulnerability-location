import tqdm
from Post_loader import *
from github import Github


def github_limit_parse(rate_limit):
    remaing_parse = 100000
    reset_time = 0
    for k, v in rate_limit.raw_data.items():
        if v['remaining'] < remaing_parse:
            remaing_parse = v['remaining']
            reset_time = v['reset']
        elif v['remaining'] == remaing_parse and v['reset'] > reset_time:
            reset_time = v['reset']

    return remaing_parse, reset_time


def search_repos():
    """
    This function tries to use git search engine to search related repos by using cpe (Common Platform Enumeration)
    as the keyword.
    """
    g = Github('your github token')
    cpe_dict = PostLoader().load_pickle('/output_vbom/ini_file/have_github_nvd.pkl')
    all_cpes = set(v.pop() for k, v in cpe_dict.items())
    store_file = {}
    for one_cpe in tqdm.tqdm(all_cpes):
        try:
            repos = g.search_repositories(query=one_cpe)
            store_file[one_cpe] = []

            rate_limit = g.get_rate_limit()
            remaing_parse, reset_time = github_limit_parse(rate_limit)
            print('remaing_parse', remaing_parse)
            if remaing_parse < 3:
                PostWriter('/output_vbom/parsed_file/matched_repo_candidates2.pkl').write_pickle(store_file)
                timestamp = time.time()
                wait_second = int(reset_time - timestamp)
                if wait_second <= 0:
                    continue
                print('wait ', wait_second)
                time.sleep(wait_second + 2)

            for one_repo in repos:
                store_file[one_cpe].append(one_repo)

                rate_limit = g.get_rate_limit()
                remaing_parse, reset_time = github_limit_parse(rate_limit)
                print('remaing_parse', remaing_parse)
                if remaing_parse < 3:
                    PostWriter('/output_vbom/parsed_file/matched_repo_candidates_have.pkl').write_pickle(store_file)
                    timestamp = time.time()
                    wait_second = int(reset_time - timestamp)
                    if wait_second <= 0:
                        continue
                    print('wait ', wait_second)
                    time.sleep(wait_second + 2)

                if len(store_file[one_cpe]) >= 10:
                    break
        except Exception as e:
            print(e)
    PostWriter('/output_vbom/parsed_file/matched_repo_candidates_have.pkl').write_pickle(store_file)