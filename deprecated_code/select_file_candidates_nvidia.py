import os

import tqdm
import requests
import numpy as np
import pandas as pd

from util.io_util import load_pickle, save_pickle, save_text

max_token = 8000

filter_list = [
    'changelog', 'news', 'changes', 'changelog', 'version', 'readme', 'makefile', 'license', 'authors', 'todo', 'TODO', 'history', 'copying', 'relnotes', 'thanks', 'notice','whatsnew', 'notes', 'release_notes', 'note', 'testlist', 'testsuite', 'test', '.gitignore', '.xlsx', '.xls', '.md', '.txt', '.doc', '.docx', '.pdf', '.rst', '.changes', '.rdoc', '.mdown', '.command', '.out', '.err', '.stderr', '.stdout', '.test', '.jpg', '.jpeg', '.png', '.svg', '.mp4', '.gif', '.exr', '.csv', '.rdf', '.ico', '.ttf', '.otf', '.woff', '.woff2', '.mock', '.stub', '.fake', '.ppt', '.pptx', '.key', '.bak', '.zip', '.gz', '.rar', '.bmp', '.yaml', '.yml', '.json', '.xml', '.ini', '.cfg', '.tar.gz', '.tgz', '.html', '.htm', '.css', '.cygport'
]


def get_embedding(text):
    text = text.replace("\n", " ")
    invoke_url = "https://ai.api.nvidia.com/v1/retrieval/nvidia/embeddings"
    headers = {
        "Authorization": "Bearer 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",
        "Accept": "application/json",
    }
    payload = {
        "input": text,
        "input_type": "passage",
        "model": "NV-Embed-QA"
    }
    session = requests.Session()
    response = session.post(invoke_url, headers=headers, json=payload)
    response.raise_for_status()
    res = response.json()

    # print(type(res))
    # tokens = res['usage']
    # print(tokens)

    vector = res['data'][0]['embedding']
    return vector


def cosine_similarity(a, b):
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))


def split_file_content(cve: str):
    output_file = f'/Volumes/NVD/experiment_data/267/content_nvidia/{cve}.csv'
    if os.path.exists(output_file):
        return pd.read_csv(output_file)

    with open(f'/Volumes/NVD/experiment_data/267/descriptions/{cve}') as f:
        description = f.read()
    df = pd.DataFrame(
        {
            'repo_name': ['null'],
            'file_name': ['null'],
            'content': [description]
        }
    )
    path = f'/Users/wangtao/Downloads/target/{cve}'
    repos = os.listdir(path)
    for repo in tqdm.tqdm(repos):
        repo_name = repo.replace('â€”', '/')
        # rec(df, repo_name, f'{path}/{repo}')
    df.to_csv(output_file, index = False)
    return df


def text_to_vector(cve: str):
    output_file = f'/Volumes/NVD/experiment_data/267/similarities_nvidia/{cve}.csv'
    if os.path.exists(output_file):
        return pd.read_csv(output_file)
    
    df = split_file_content(cve)

    df['vector'] = df.content.apply(lambda x: get_embedding(x))
    description_vector = df.loc[0].vector
    df['similarities'] = df.vector.apply(lambda x: cosine_similarity(x, description_vector))
    df = df.sort_values('similarities', ascending = False)
    df.to_csv(output_file, index = False)
    return df


def select_file_candidates(ans):
    cve_list = ['CVE-2018-1000888']
    # cve_list = [
    #     'CVE-2018-1000888', 'CVE-2015-8748', 'CVE-2019-11411', 'CVE-2019-11412', 'CVE-2017-15010', 'CVE-2021-28363', 'CVE-2020-26137', 'CVE-2019-20479', 'CVE-2022-23614', 'CVE-2019-1010305', 'CVE-2020-8203', 'CVE-2022-24724', 'CVE-2013-7436', 'CVE-2020-9274', 'CVE-2019-15026', 'CVE-2022-29869', 'CVE-2020-4067', 'CVE-2019-16235', 'CVE-2019-16236', 'CVE-2019-16237', 'CVE-2020-14399', 'CVE-2020-14400', 'CVE-2020-14401', 'CVE-2019-19204', 'CVE-2019-1010319', 'CVE-2019-1010317', 'CVE-2020-27783', 'CVE-2018-1002200', 'CVE-2022-30784', 'CVE-2018-15127', 'CVE-2018-20019'
    # ]
    rank = {}
    for cve in tqdm.tqdm(cve_list):
        print('current cve:', cve)
        df = text_to_vector(cve)

        df.drop(df.index[0], inplace = True)
        rank[cve] = -1
        for index, (_, row) in enumerate(df.iterrows()):
            if row.file_name.lower() == ans[cve].lower():
                rank[cve] = index + 1
                break
    # save_pickle('/Volumes/NVD/experiment_data/267/result_nvidia.pkl', rank)
    save_text('/Volumes/NVD/experiment_data/267/result_nvidia', rank)
    return rank


if __name__ == '__main__':
    ans = {
        'CVE-2018-1000888': 'archive/tar.php',
        'CVE-2015-8748': 'radicale/rights/regex.py',
        'CVE-2019-11411': 'jsnumber.c',
        'CVE-2019-11412': 'jscompile.c',
        'CVE-2017-15010': 'lib/cookie.js', 
        'CVE-2021-28363': 'src/urllib3/connection.py',
        'CVE-2020-26137': 'src/urllib3/connection.py',
        'CVE-2019-20479': 'src/mod_auth_openidc.c',
        'CVE-2022-23614': 'src/extension/coreextension.php',
        'CVE-2019-1010305': 'libmspack/mspack/chmd.c',
        'CVE-2020-8203': 'lodash.js',
        'CVE-2022-24724': 'extensions/table.c',
        'CVE-2013-7436': 'include/webutil.js',
        'CVE-2020-9274': 'src/diraliases.c',
        'CVE-2019-15026': 'memcached.c',
        'CVE-2022-29869': 'mount.cifs.c',
        'CVE-2020-4067': 'src/apps/relay/ns_ioalib_engine_impl.c',
        'CVE-2019-16235': 'xmpp-vala/src/module/xep/0280_message_carbons.vala',
        'CVE-2019-16236': 'xmpp-vala/src/module/roster/module.vala',
        'CVE-2019-16237': 'xmpp-vala/src/module/xep/0313_message_archive_management.vala',
        'CVE-2020-14399': 'libvncclient/rfbproto.c',
        'CVE-2020-14400': 'libvncserver/translate.c',
        'CVE-2020-14401': 'libvncserver/scale.c',
        'CVE-2019-19204': 'src/regparse.c',
        'CVE-2019-1010319': 'cli/wave64.c',
        'CVE-2019-1010317': 'cli/caff.c',
        'CVE-2020-27783': 'src/lxml/html/clean.py',
        'CVE-2018-1002200': 'src/main/java/org/codehaus/plexus/archiver/abstractunarchiver.java',
        'CVE-2022-30784': 'libntfs-3g/attrib.c',
        'CVE-2018-15127': 'libvncserver/rfbserver.c',
        'CVE-2018-20019':'libvncclient/rfbproto.c'
    }
    select_file_candidates(ans)