import pytz
import time
import requests
from datetime import datetime

github_tokens = [
    
]


def check_api_limit(headers):
    remaining = headers['X-RateLimit-Remaining']
    reset_time = int(headers['X-RateLimit-Reset'])
    if int(remaining) == 0:
        reset_time_utc = datetime.utcfromtimestamp(reset_time)
        beijing_timezone = pytz.timezone('Asia/Shanghai')
        reset_time_beijing = reset_time_utc.replace(tzinfo=pytz.utc).astimezone(beijing_timezone)
        now_beijing = datetime.now(beijing_timezone)
        time_to_reset = (reset_time_beijing - now_beijing).total_seconds() + 2
        # print(f'剩余重置时间：{time_to_reset} seconds')
        if time_to_reset < 0:
            time_to_reset = 1
        time.sleep(time_to_reset)


def get_original_repo_name(repo_full_name: str, token: str):
    url = f"https://api.github.com/repos/{repo_full_name}"
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        repo = response.json()
        if 'parent' in repo.keys() and 'full_name' in repo['parent']:
            res = repo['parent']['full_name']
        else:
            res = repo_full_name
        return res
    else:
        # print(f"Failed to retrieve information for {repo_full_name}")
        return repo_full_name


def get_latest_repo_name(old_full_name, token: str):
    url = f'https://api.github.com/repos/{old_full_name}'
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        repo = response.json()
        res = repo['full_name'] if 'full_name' in repo.keys() else old_full_name
        return res
    else:
        # print(f"Failed to retrieve information for {old_full_name}")
        return old_full_name
    

def check_repo_exist(repo_full_name: str, token: str):
    url = f"https://api.github.com/repos/{repo_full_name}"
    headers = {'Authorization': f'token {token}'}
    response = requests.get(url, headers = headers)
    check_api_limit(response.headers)
    if response.ok:
        return True
    else:
        return False


if __name__ == '__main__':
    # repo_name = 'projectatomic/libpod'
    # repo_name = 'containers/podman'
    # repo_name = 'saitoha/libsixel'
    # repo_name = 'libsixel/libsixel'
    repo_name = 'cyrillos/nasm'
    
    print(get_original_repo_name(repo_name))
    print(get_latest_repo_name(repo_name))