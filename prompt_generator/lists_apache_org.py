from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def generate_prompt(url: str):

    driver = webdriver.Chrome()
    driver.get(url)

    element = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.CLASS_NAME, 'chatty_body'))
    )

    # content = driver.page_source
    # print(content)

    title = driver.find_element(By.CLASS_NAME, 'chatty_title').text
    content = driver.find_elements(By.CLASS_NAME, 'chatty_body')
    # print(type(content))        # list，每个元素是帖子内容
    # print(len(content))
    
    prompt = '''
I will give you some information about the content of posts discussing software vulnerabilities. The information includes these parts: title and post content. followed by {Title} and {Post} respectively. Posts in the content section follow {Post1}, {Post2}, {Post3}, etc. You need to extract the valuable parts from the information. The focus is on the information section describing the vulnerability. If the content section contains insufficient information to extract valuable details about the vulnerability, the output should be "no results".\n\n'''[1:]

    prompt += '{Title}:\n' + f'{title}\n\n' + '{Post}:\n'
    for index, post in enumerate(content):
        # print(index)
        prompt += '{Post' + f'{index + 1}' + '}:\n' + post.text + '\n'
    prompt += '''
Atenetion: If the content section contains insufficient information to extract valuable details about the vulnerability, the output should be "no results". Do not output redundant prompt information, only output "no results".'''
    
    driver.quit()

    return prompt

if __name__ == '__main__':
    url = 'https://lists.apache.org/thread/pvoyyzq67ymo1ktwp5j7s6spf2sz0vfk'
    prompt = generate_prompt(url)
    if prompt != None:
        with open('./prompt_template/prompt_test/lists.apache.org', 'w') as f:
            print(prompt, file = f)