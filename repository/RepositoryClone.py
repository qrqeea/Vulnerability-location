import tqdm
import random
from util import *
from common.github_util import *


class RepositoryClone:

    def __init__(self, root_path: str, cve_repo_commit: dict):
        self.root_path = root_path
        self.cve_repo_commit = cve_repo_commit

        self.cloned_repo_dir = f'{self.root_path}/repo_all'
        if not os.path.exists(self.cloned_repo_dir):
            os.mkdir(self.cloned_repo_dir)

        self.target_dir = f'{self.root_path}/target'
        if not os.path.exists(self.target_dir):
            os.mkdir(self.target_dir)

        repo_all = set()
        # cves = set()
        for cve, repos in self.cve_repo_commit.items():
            # cves.add(cve)
            for repo_name, sha in repos:
                repo_all.add(repo_name)

        # print(len(repo_all))
        # print(len(cves))
        self.repo_all = repo_all


    def start(self):
        # self.clone_all_repo()
        self.clone_specified_repo()

    
    def clone_all_repo(self):
        for repo_full_name in tqdm.tqdm(self.repo_all):
            # print(repo_full_name)
            repo_full_name_updated = repo_full_name.replace('/', '—')
            # print(repo_full_name_updated)

            dest_dir = f'{self.cloned_repo_dir}/{repo_full_name_updated}'
            if os.path.exists(dest_dir):
                continue
            # cmd = f'git clone --depth=1 {url}.git {path}/{repo_full_name_updated}'
            cmd = f'git clone --depth=1 git@github.com:{repo_full_name}.git {dest_dir}'
            if os.system(cmd) != 0:
                save_text(f'{self.cloned_repo_dir}/error_list', repo_full_name, 'a')

    
    def clone_specified_repo(self):

        def clone_specified_repo_sub(cve_list_sub: list):
            for cve in tqdm.tqdm(cve_list_sub):
                repo_and_sha = self.cve_repo_commit[cve]
                dir_name = f'{self.target_dir}/{cve}'
                if not os.path.exists(dir_name):
                    os.mkdir(dir_name)
                
                for repo_full_name, sha in repo_and_sha:
                    repo_full_name_updated = repo_full_name.replace('/', '—')
                    dest_path_repo = f'{dir_name}/{repo_full_name_updated}'
                    if os.path.exists(dest_path_repo):
                        continue
                    source_path_repo = f'{self.cloned_repo_dir}/{repo_full_name_updated}'

                    cmd = f'cd {source_path_repo} && git clean -fd && git checkout . && git checkout {sha} 1>/dev/null 2>/dev/null'
                    # print(111, cmd)
                    if os.system(cmd) != 0:
                        fetch_cmd = f'cd {source_path_repo} && git fetch origin {sha} --depth=1 1>/dev/null 2>/dev/null'
                        # print(222, fetch_cmd)
                        if os.system(fetch_cmd) != 0:
                            checkout_cmd = f'cd {source_path_repo} && git checkout {sha} 1>/dev/null 2>/dev/null'
                            # print(333, checkout_cmd)
                            if os.system(checkout_cmd) != 0:
                                save_text(f'{self.target_dir}/error_list', (cve, repo_full_name), 'a')
                                continue

                    if not os.path.exists(dest_path_repo):
                        os.mkdir(dest_path_repo)

                    cmd = f"rsync -a --exclude='.git' {source_path_repo} {dir_name}"
                    # print(444, cmd)
                    
                    if os.system(cmd) != 0:
                        save_text(f'{self.target_dir}/error_list', (cve, repo_full_name), 'a')
        
        multi_thread(list(self.cve_repo_commit.keys()), clone_specified_repo_sub, chunk_size = 1500)