import os
from util import load_pickle, save_pickle, copy_file, save_text, load_json


def filter_cve_list(data_path: str):

    # 68565 cve with vulnerable components
    path = f'{data_path}/combined_vul_component_clean_correct_pure_nvd.pkl'
    data = load_pickle(path)
    a = set(data.keys())

    # 9435 cve (groundtruth data)
    path = f'{data_path}/cleaned_gt_commit_single_v2.pkl'
    data = load_pickle(path)
    b = set([item[0] for item in data.keys()])
    for item in b.copy():
        if '.' in item:
            b.remove(item)  # 四个重复数据：CVE-2016-9840 - CVE-2016-9843

    # print(len(a))           # 68565
    # print(len(b))           # 9017
    # print(len(a & b))       # 4429
    cve_list = b - a & b      
    # print(len(cve_list))    # 4588
    
    return cve_list


def filter_json_file(cve_list: list, cur_path: str, target_path):
    
    cve_json_dir = f'{target_path}/cve_json'
    if not os.path.exists(cve_json_dir):
        os.mkdir(cve_json_dir)

    for file in os.listdir(cur_path):
        if file in ['delta.json', 'deltaLog.json']:
            continue

        fullPath = os.path.join(cur_path, file)
        # print(fullPath)
        if os.path.isdir(fullPath):
            filter_json_file(cve_list, fullPath, target_path)
            continue
        cve_id = file.split('.')[0]
        if cve_id in cve_list:
            try:
                data = load_json(fullPath)
                if data['cveMetadata']['state'] == 'REJECTED' or 'references' not in data['containers']['cna'].keys():
                    continue
                references = data['containers']['cna']['references']
                if len(references) != 0:
                    copy_file(fullPath, f'{cve_json_dir}/{file}')
            except Exception as e:
                save_text(
                    f'{target_path}/error_info',
                    f'module: {filter_json_file.__module__}, function: {filter_json_file.__name__}, error: open {cve_id}.json failure',
                    'a'
                )


def filter_datasets(data_path: str, target_path: str):

    if os.path.exists(f'{target_path}/cve_list.pkl'):
        return load_pickle(f'{target_path}/cve_list.pkl')

    cve_list = filter_cve_list(data_path)
    # print(len(cve_list))          # 4588

    filter_json_file(               # 17个cve找不到json文件, 21个cve rejected, 剩余4550个
        cve_list = cve_list,
        cur_path = f'{data_path}/cve_json',
        target_path = target_path
    )

    cve_list = [file.split('.')[0] for file in os.listdir(f'{target_path}/cve_json')]

    save_text(f'{target_path}/cve_list', cve_list)
    save_pickle(f'{target_path}/cve_list.pkl', cve_list)

    return cve_list